'------------------------------------------------------------------------------
' <auto-generated>
'     Этот код создан программой.
'     Исполняемая версия:4.0.30319.42000
'
'     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
'     повторной генерации кода.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("GidrogasitelDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class GidrogasitelDataSet
    Inherits Global.System.Data.DataSet
    
    Private tablemain As mainDataTable
    
    Private tableAppointment As AppointmentDataTable
    
    Private tableOperators As OperatorsDataTable
    
    Private tableRemont As RemontDataTable
    
    Private tableApparatType As ApparatTypeDataTable
    
    Private tableRezult As RezultDataTable
    
    Private tableApparats As ApparatsDataTable
    
    Private relationRemont_main As Global.System.Data.DataRelation
    
    Private relationOperators_main As Global.System.Data.DataRelation
    
    Private relationRezult1_main As Global.System.Data.DataRelation
    
    Private relationRezult2_main As Global.System.Data.DataRelation
    
    Private relationRezult_main As Global.System.Data.DataRelation
    
    Private relationApparats_main As Global.System.Data.DataRelation
    
    Private relationApparatType_Apparats As Global.System.Data.DataRelation
    
    Private relationAppointment_Operators As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("main")) Is Nothing) Then
                MyBase.Tables.Add(New mainDataTable(ds.Tables("main")))
            End If
            If (Not (ds.Tables("Appointment")) Is Nothing) Then
                MyBase.Tables.Add(New AppointmentDataTable(ds.Tables("Appointment")))
            End If
            If (Not (ds.Tables("Operators")) Is Nothing) Then
                MyBase.Tables.Add(New OperatorsDataTable(ds.Tables("Operators")))
            End If
            If (Not (ds.Tables("Remont")) Is Nothing) Then
                MyBase.Tables.Add(New RemontDataTable(ds.Tables("Remont")))
            End If
            If (Not (ds.Tables("ApparatType")) Is Nothing) Then
                MyBase.Tables.Add(New ApparatTypeDataTable(ds.Tables("ApparatType")))
            End If
            If (Not (ds.Tables("Rezult")) Is Nothing) Then
                MyBase.Tables.Add(New RezultDataTable(ds.Tables("Rezult")))
            End If
            If (Not (ds.Tables("Apparats")) Is Nothing) Then
                MyBase.Tables.Add(New ApparatsDataTable(ds.Tables("Apparats")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property main() As mainDataTable
        Get
            Return Me.tablemain
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Appointment() As AppointmentDataTable
        Get
            Return Me.tableAppointment
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Operators() As OperatorsDataTable
        Get
            Return Me.tableOperators
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Remont() As RemontDataTable
        Get
            Return Me.tableRemont
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ApparatType() As ApparatTypeDataTable
        Get
            Return Me.tableApparatType
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Rezult() As RezultDataTable
        Get
            Return Me.tableRezult
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Apparats() As ApparatsDataTable
        Get
            Return Me.tableApparats
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As GidrogasitelDataSet = CType(MyBase.Clone,GidrogasitelDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("main")) Is Nothing) Then
                MyBase.Tables.Add(New mainDataTable(ds.Tables("main")))
            End If
            If (Not (ds.Tables("Appointment")) Is Nothing) Then
                MyBase.Tables.Add(New AppointmentDataTable(ds.Tables("Appointment")))
            End If
            If (Not (ds.Tables("Operators")) Is Nothing) Then
                MyBase.Tables.Add(New OperatorsDataTable(ds.Tables("Operators")))
            End If
            If (Not (ds.Tables("Remont")) Is Nothing) Then
                MyBase.Tables.Add(New RemontDataTable(ds.Tables("Remont")))
            End If
            If (Not (ds.Tables("ApparatType")) Is Nothing) Then
                MyBase.Tables.Add(New ApparatTypeDataTable(ds.Tables("ApparatType")))
            End If
            If (Not (ds.Tables("Rezult")) Is Nothing) Then
                MyBase.Tables.Add(New RezultDataTable(ds.Tables("Rezult")))
            End If
            If (Not (ds.Tables("Apparats")) Is Nothing) Then
                MyBase.Tables.Add(New ApparatsDataTable(ds.Tables("Apparats")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablemain = CType(MyBase.Tables("main"),mainDataTable)
        If (initTable = true) Then
            If (Not (Me.tablemain) Is Nothing) Then
                Me.tablemain.InitVars
            End If
        End If
        Me.tableAppointment = CType(MyBase.Tables("Appointment"),AppointmentDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAppointment) Is Nothing) Then
                Me.tableAppointment.InitVars
            End If
        End If
        Me.tableOperators = CType(MyBase.Tables("Operators"),OperatorsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOperators) Is Nothing) Then
                Me.tableOperators.InitVars
            End If
        End If
        Me.tableRemont = CType(MyBase.Tables("Remont"),RemontDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRemont) Is Nothing) Then
                Me.tableRemont.InitVars
            End If
        End If
        Me.tableApparatType = CType(MyBase.Tables("ApparatType"),ApparatTypeDataTable)
        If (initTable = true) Then
            If (Not (Me.tableApparatType) Is Nothing) Then
                Me.tableApparatType.InitVars
            End If
        End If
        Me.tableRezult = CType(MyBase.Tables("Rezult"),RezultDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRezult) Is Nothing) Then
                Me.tableRezult.InitVars
            End If
        End If
        Me.tableApparats = CType(MyBase.Tables("Apparats"),ApparatsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableApparats) Is Nothing) Then
                Me.tableApparats.InitVars
            End If
        End If
        Me.relationRemont_main = Me.Relations("Remont_main")
        Me.relationOperators_main = Me.Relations("Operators_main")
        Me.relationRezult1_main = Me.Relations("Rezult1_main")
        Me.relationRezult2_main = Me.Relations("Rezult2_main")
        Me.relationRezult_main = Me.Relations("Rezult_main")
        Me.relationApparats_main = Me.Relations("Apparats_main")
        Me.relationApparatType_Apparats = Me.Relations("ApparatType_Apparats")
        Me.relationAppointment_Operators = Me.Relations("Appointment_Operators")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "GidrogasitelDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/GidrogasitelDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablemain = New mainDataTable()
        MyBase.Tables.Add(Me.tablemain)
        Me.tableAppointment = New AppointmentDataTable()
        MyBase.Tables.Add(Me.tableAppointment)
        Me.tableOperators = New OperatorsDataTable()
        MyBase.Tables.Add(Me.tableOperators)
        Me.tableRemont = New RemontDataTable()
        MyBase.Tables.Add(Me.tableRemont)
        Me.tableApparatType = New ApparatTypeDataTable()
        MyBase.Tables.Add(Me.tableApparatType)
        Me.tableRezult = New RezultDataTable()
        MyBase.Tables.Add(Me.tableRezult)
        Me.tableApparats = New ApparatsDataTable()
        MyBase.Tables.Add(Me.tableApparats)
        Dim fkc As Global.System.Data.ForeignKeyConstraint
        fkc = New Global.System.Data.ForeignKeyConstraint("Remont_main", New Global.System.Data.DataColumn() {Me.tableRemont.IDColumn}, New Global.System.Data.DataColumn() {Me.tablemain.RemontColumn})
        Me.tablemain.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.SetNull
        fkc.UpdateRule = Global.System.Data.Rule.None
        Me.relationRemont_main = New Global.System.Data.DataRelation("Remont_main", New Global.System.Data.DataColumn() {Me.tableRemont.IDColumn}, New Global.System.Data.DataColumn() {Me.tablemain.RemontColumn}, false)
        Me.Relations.Add(Me.relationRemont_main)
        Me.relationOperators_main = New Global.System.Data.DataRelation("Operators_main", New Global.System.Data.DataColumn() {Me.tableOperators.IDColumn}, New Global.System.Data.DataColumn() {Me.tablemain.OperatorColumn}, false)
        Me.Relations.Add(Me.relationOperators_main)
        Me.relationRezult1_main = New Global.System.Data.DataRelation("Rezult1_main", New Global.System.Data.DataColumn() {Me.tableRezult.IDColumn}, New Global.System.Data.DataColumn() {Me.tablemain.Rezult1Column}, false)
        Me.Relations.Add(Me.relationRezult1_main)
        Me.relationRezult2_main = New Global.System.Data.DataRelation("Rezult2_main", New Global.System.Data.DataColumn() {Me.tableRezult.IDColumn}, New Global.System.Data.DataColumn() {Me.tablemain.Rezult2Column}, false)
        Me.Relations.Add(Me.relationRezult2_main)
        Me.relationRezult_main = New Global.System.Data.DataRelation("Rezult_main", New Global.System.Data.DataColumn() {Me.tableRezult.IDColumn}, New Global.System.Data.DataColumn() {Me.tablemain.Rezult3Column}, false)
        Me.Relations.Add(Me.relationRezult_main)
        Me.relationApparats_main = New Global.System.Data.DataRelation("Apparats_main", New Global.System.Data.DataColumn() {Me.tableApparats.IDColumn}, New Global.System.Data.DataColumn() {Me.tablemain.TypeColumn}, false)
        Me.Relations.Add(Me.relationApparats_main)
        Me.relationApparatType_Apparats = New Global.System.Data.DataRelation("ApparatType_Apparats", New Global.System.Data.DataColumn() {Me.tableApparatType.IDColumn}, New Global.System.Data.DataColumn() {Me.tableApparats.TypeColumn}, false)
        Me.Relations.Add(Me.relationApparatType_Apparats)
        Me.relationAppointment_Operators = New Global.System.Data.DataRelation("Appointment_Operators", New Global.System.Data.DataColumn() {Me.tableAppointment.IDColumn}, New Global.System.Data.DataColumn() {Me.tableOperators.AppointmentColumn}, false)
        Me.Relations.Add(Me.relationAppointment_Operators)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializemain() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeAppointment() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeOperators() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeRemont() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeApparatType() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeRezult() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeApparats() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As GidrogasitelDataSet = New GidrogasitelDataSet()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub mainRowChangeEventHandler(ByVal sender As Object, ByVal e As mainRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub AppointmentRowChangeEventHandler(ByVal sender As Object, ByVal e As AppointmentRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub OperatorsRowChangeEventHandler(ByVal sender As Object, ByVal e As OperatorsRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub RemontRowChangeEventHandler(ByVal sender As Object, ByVal e As RemontRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub ApparatTypeRowChangeEventHandler(ByVal sender As Object, ByVal e As ApparatTypeRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub RezultRowChangeEventHandler(ByVal sender As Object, ByVal e As RezultRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub ApparatsRowChangeEventHandler(ByVal sender As Object, ByVal e As ApparatsRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class mainDataTable
        Inherits Global.System.Data.TypedTableBase(Of mainRow)
        
        Private columnType As Global.System.Data.DataColumn
        
        Private columnNum As Global.System.Data.DataColumn
        
        Private column_DateTime As Global.System.Data.DataColumn
        
        Private columnRemont As Global.System.Data.DataColumn
        
        Private columnAppointment As Global.System.Data.DataColumn
        
        Private columnOperator As Global.System.Data.DataColumn
        
        Private columnRezult1 As Global.System.Data.DataColumn
        
        Private columnRezult2 As Global.System.Data.DataColumn
        
        Private columnRezult3 As Global.System.Data.DataColumn
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnRezult4 As Global.System.Data.DataColumn
        
        Private columnText As Global.System.Data.DataColumn
        
        Private columnIsDel As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "main"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property _DateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.column_DateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RemontColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemont
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AppointmentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAppointment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property OperatorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOperator
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Rezult1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRezult1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Rezult2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRezult2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Rezult3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRezult3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Rezult4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRezult4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TextColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnText
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IsDelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsDel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As mainRow
            Get
                Return CType(Me.Rows(index),mainRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event mainRowChanging As mainRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event mainRowChanged As mainRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event mainRowDeleting As mainRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event mainRowDeleted As mainRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddmainRow(ByVal row As mainRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddmainRow(ByVal parentApparatsRowByApparats_main As ApparatsRow, ByVal Num As String, ByVal _DateTime As Date, ByVal parentRemontRowByRemont_main As RemontRow, ByVal Appointment As Long, ByVal parentOperatorsRowByOperators_main As OperatorsRow, ByVal parentRezultRowByRezult1_main As RezultRow, ByVal parentRezultRowByRezult2_main As RezultRow, ByVal parentRezultRowByRezult_main As RezultRow, ByVal Rezult4 As Long, ByVal Text As String, ByVal IsDel As Boolean) As mainRow
            Dim rowmainRow As mainRow = CType(Me.NewRow,mainRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Num, _DateTime, Nothing, Appointment, Nothing, Nothing, Nothing, Nothing, Nothing, Rezult4, Text, IsDel}
            If (Not (parentApparatsRowByApparats_main) Is Nothing) Then
                columnValuesArray(0) = parentApparatsRowByApparats_main(0)
            End If
            If (Not (parentRemontRowByRemont_main) Is Nothing) Then
                columnValuesArray(3) = parentRemontRowByRemont_main(1)
            End If
            If (Not (parentOperatorsRowByOperators_main) Is Nothing) Then
                columnValuesArray(5) = parentOperatorsRowByOperators_main(3)
            End If
            If (Not (parentRezultRowByRezult1_main) Is Nothing) Then
                columnValuesArray(6) = parentRezultRowByRezult1_main(8)
            End If
            If (Not (parentRezultRowByRezult2_main) Is Nothing) Then
                columnValuesArray(7) = parentRezultRowByRezult2_main(8)
            End If
            If (Not (parentRezultRowByRezult_main) Is Nothing) Then
                columnValuesArray(8) = parentRezultRowByRezult_main(8)
            End If
            rowmainRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowmainRow)
            Return rowmainRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByID(ByVal ID As Long) As mainRow
            Return CType(Me.Rows.Find(New Object() {ID}),mainRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As mainDataTable = CType(MyBase.Clone,mainDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New mainDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnType = MyBase.Columns("Type")
            Me.columnNum = MyBase.Columns("Num")
            Me.column_DateTime = MyBase.Columns("_DateTime")
            Me.columnRemont = MyBase.Columns("Remont")
            Me.columnAppointment = MyBase.Columns("Appointment")
            Me.columnOperator = MyBase.Columns("Operator")
            Me.columnRezult1 = MyBase.Columns("Rezult1")
            Me.columnRezult2 = MyBase.Columns("Rezult2")
            Me.columnRezult3 = MyBase.Columns("Rezult3")
            Me.columnID = MyBase.Columns("ID")
            Me.columnRezult4 = MyBase.Columns("Rezult4")
            Me.columnText = MyBase.Columns("Text")
            Me.columnIsDel = MyBase.Columns("IsDel")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnType = New Global.System.Data.DataColumn("Type", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType)
            Me.columnNum = New Global.System.Data.DataColumn("Num", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNum)
            Me.column_DateTime = New Global.System.Data.DataColumn("_DateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.column_DateTime)
            Me.columnRemont = New Global.System.Data.DataColumn("Remont", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemont)
            Me.columnAppointment = New Global.System.Data.DataColumn("Appointment", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAppointment)
            Me.columnOperator = New Global.System.Data.DataColumn("Operator", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            Me.columnOperator.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "OperatorColumn")
            Me.columnOperator.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnOperator")
            Me.columnOperator.ExtendedProperties.Add("Generator_UserColumnName", "Operator")
            MyBase.Columns.Add(Me.columnOperator)
            Me.columnRezult1 = New Global.System.Data.DataColumn("Rezult1", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRezult1)
            Me.columnRezult2 = New Global.System.Data.DataColumn("Rezult2", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRezult2)
            Me.columnRezult3 = New Global.System.Data.DataColumn("Rezult3", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRezult3)
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnRezult4 = New Global.System.Data.DataColumn("Rezult4", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRezult4)
            Me.columnText = New Global.System.Data.DataColumn("Text", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnText)
            Me.columnIsDel = New Global.System.Data.DataColumn("IsDel", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsDel)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnNum.MaxLength = 15
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = 1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnText.MaxLength = 536870911
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewmainRow() As mainRow
            Return CType(Me.NewRow,mainRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New mainRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(mainRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.mainRowChangedEvent) Is Nothing) Then
                RaiseEvent mainRowChanged(Me, New mainRowChangeEvent(CType(e.Row,mainRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.mainRowChangingEvent) Is Nothing) Then
                RaiseEvent mainRowChanging(Me, New mainRowChangeEvent(CType(e.Row,mainRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.mainRowDeletedEvent) Is Nothing) Then
                RaiseEvent mainRowDeleted(Me, New mainRowChangeEvent(CType(e.Row,mainRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.mainRowDeletingEvent) Is Nothing) Then
                RaiseEvent mainRowDeleting(Me, New mainRowChangeEvent(CType(e.Row,mainRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovemainRow(ByVal row As mainRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As GidrogasitelDataSet = New GidrogasitelDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "mainDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AppointmentDataTable
        Inherits Global.System.Data.TypedTableBase(Of AppointmentRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnAppointment As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Appointment"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AppointmentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAppointment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AppointmentRow
            Get
                Return CType(Me.Rows(index),AppointmentRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event AppointmentRowChanging As AppointmentRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event AppointmentRowChanged As AppointmentRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event AppointmentRowDeleting As AppointmentRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event AppointmentRowDeleted As AppointmentRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddAppointmentRow(ByVal row As AppointmentRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddAppointmentRow(ByVal Appointment As String) As AppointmentRow
            Dim rowAppointmentRow As AppointmentRow = CType(Me.NewRow,AppointmentRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Appointment}
            rowAppointmentRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowAppointmentRow)
            Return rowAppointmentRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByID(ByVal ID As Long) As AppointmentRow
            Return CType(Me.Rows.Find(New Object() {ID}),AppointmentRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As AppointmentDataTable = CType(MyBase.Clone,AppointmentDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New AppointmentDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnAppointment = MyBase.Columns("Appointment")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnAppointment = New Global.System.Data.DataColumn("Appointment", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAppointment)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = 1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnAppointment.MaxLength = 30
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewAppointmentRow() As AppointmentRow
            Return CType(Me.NewRow,AppointmentRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New AppointmentRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(AppointmentRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AppointmentRowChangedEvent) Is Nothing) Then
                RaiseEvent AppointmentRowChanged(Me, New AppointmentRowChangeEvent(CType(e.Row,AppointmentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AppointmentRowChangingEvent) Is Nothing) Then
                RaiseEvent AppointmentRowChanging(Me, New AppointmentRowChangeEvent(CType(e.Row,AppointmentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AppointmentRowDeletedEvent) Is Nothing) Then
                RaiseEvent AppointmentRowDeleted(Me, New AppointmentRowChangeEvent(CType(e.Row,AppointmentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AppointmentRowDeletingEvent) Is Nothing) Then
                RaiseEvent AppointmentRowDeleting(Me, New AppointmentRowChangeEvent(CType(e.Row,AppointmentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveAppointmentRow(ByVal row As AppointmentRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As GidrogasitelDataSet = New GidrogasitelDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AppointmentDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OperatorsDataTable
        Inherits Global.System.Data.TypedTableBase(Of OperatorsRow)
        
        Private columnFirst As Global.System.Data.DataColumn
        
        Private columnSecond As Global.System.Data.DataColumn
        
        Private columnLast As Global.System.Data.DataColumn
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnAppointment As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Operators"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FirstColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirst
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SecondColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSecond
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LastColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLast
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AppointmentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAppointment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OperatorsRow
            Get
                Return CType(Me.Rows(index),OperatorsRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OperatorsRowChanging As OperatorsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OperatorsRowChanged As OperatorsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OperatorsRowDeleting As OperatorsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OperatorsRowDeleted As OperatorsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddOperatorsRow(ByVal row As OperatorsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddOperatorsRow(ByVal First As String, ByVal Second As String, ByVal Last As String, ByVal parentAppointmentRowByAppointment_Operators As AppointmentRow) As OperatorsRow
            Dim rowOperatorsRow As OperatorsRow = CType(Me.NewRow,OperatorsRow)
            Dim columnValuesArray() As Object = New Object() {First, Second, Last, Nothing, Nothing}
            If (Not (parentAppointmentRowByAppointment_Operators) Is Nothing) Then
                columnValuesArray(4) = parentAppointmentRowByAppointment_Operators(0)
            End If
            rowOperatorsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOperatorsRow)
            Return rowOperatorsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByID(ByVal ID As Long) As OperatorsRow
            Return CType(Me.Rows.Find(New Object() {ID}),OperatorsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OperatorsDataTable = CType(MyBase.Clone,OperatorsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OperatorsDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnFirst = MyBase.Columns("First")
            Me.columnSecond = MyBase.Columns("Second")
            Me.columnLast = MyBase.Columns("Last")
            Me.columnID = MyBase.Columns("ID")
            Me.columnAppointment = MyBase.Columns("Appointment")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnFirst = New Global.System.Data.DataColumn("First", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirst)
            Me.columnSecond = New Global.System.Data.DataColumn("Second", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSecond)
            Me.columnLast = New Global.System.Data.DataColumn("Last", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLast)
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnAppointment = New Global.System.Data.DataColumn("Appointment", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAppointment)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnFirst.DefaultValue = CType("""""",String)
            Me.columnFirst.MaxLength = 20
            Me.columnSecond.DefaultValue = CType("""""",String)
            Me.columnSecond.MaxLength = 20
            Me.columnLast.DefaultValue = CType("""""",String)
            Me.columnLast.MaxLength = 20
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = 1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewOperatorsRow() As OperatorsRow
            Return CType(Me.NewRow,OperatorsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OperatorsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OperatorsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OperatorsRowChangedEvent) Is Nothing) Then
                RaiseEvent OperatorsRowChanged(Me, New OperatorsRowChangeEvent(CType(e.Row,OperatorsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OperatorsRowChangingEvent) Is Nothing) Then
                RaiseEvent OperatorsRowChanging(Me, New OperatorsRowChangeEvent(CType(e.Row,OperatorsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OperatorsRowDeletedEvent) Is Nothing) Then
                RaiseEvent OperatorsRowDeleted(Me, New OperatorsRowChangeEvent(CType(e.Row,OperatorsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OperatorsRowDeletingEvent) Is Nothing) Then
                RaiseEvent OperatorsRowDeleting(Me, New OperatorsRowChangeEvent(CType(e.Row,OperatorsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveOperatorsRow(ByVal row As OperatorsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As GidrogasitelDataSet = New GidrogasitelDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OperatorsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RemontDataTable
        Inherits Global.System.Data.TypedTableBase(Of RemontRow)
        
        Private columnRemont As Global.System.Data.DataColumn
        
        Private columnID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Remont"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RemontColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemont
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RemontRow
            Get
                Return CType(Me.Rows(index),RemontRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event RemontRowChanging As RemontRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event RemontRowChanged As RemontRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event RemontRowDeleting As RemontRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event RemontRowDeleted As RemontRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddRemontRow(ByVal row As RemontRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddRemontRow(ByVal Remont As String) As RemontRow
            Dim rowRemontRow As RemontRow = CType(Me.NewRow,RemontRow)
            Dim columnValuesArray() As Object = New Object() {Remont, Nothing}
            rowRemontRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRemontRow)
            Return rowRemontRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByID(ByVal ID As Long) As RemontRow
            Return CType(Me.Rows.Find(New Object() {ID}),RemontRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RemontDataTable = CType(MyBase.Clone,RemontDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RemontDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnRemont = MyBase.Columns("Remont")
            Me.columnID = MyBase.Columns("ID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnRemont = New Global.System.Data.DataColumn("Remont", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemont)
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnRemont.MaxLength = 10
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = 1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewRemontRow() As RemontRow
            Return CType(Me.NewRow,RemontRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RemontRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RemontRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RemontRowChangedEvent) Is Nothing) Then
                RaiseEvent RemontRowChanged(Me, New RemontRowChangeEvent(CType(e.Row,RemontRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RemontRowChangingEvent) Is Nothing) Then
                RaiseEvent RemontRowChanging(Me, New RemontRowChangeEvent(CType(e.Row,RemontRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RemontRowDeletedEvent) Is Nothing) Then
                RaiseEvent RemontRowDeleted(Me, New RemontRowChangeEvent(CType(e.Row,RemontRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RemontRowDeletingEvent) Is Nothing) Then
                RaiseEvent RemontRowDeleting(Me, New RemontRowChangeEvent(CType(e.Row,RemontRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveRemontRow(ByVal row As RemontRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As GidrogasitelDataSet = New GidrogasitelDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RemontDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ApparatTypeDataTable
        Inherits Global.System.Data.TypedTableBase(Of ApparatTypeRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnName As Global.System.Data.DataColumn
        
        Private columnCount As Global.System.Data.DataColumn
        
        Private columnS1 As Global.System.Data.DataColumn
        
        Private columnS2 As Global.System.Data.DataColumn
        
        Private columnS3 As Global.System.Data.DataColumn
        
        Private columnS4 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ApparatType"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property S1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnS1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property S2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnS2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property S3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnS3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property S4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnS4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ApparatTypeRow
            Get
                Return CType(Me.Rows(index),ApparatTypeRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ApparatTypeRowChanging As ApparatTypeRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ApparatTypeRowChanged As ApparatTypeRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ApparatTypeRowDeleting As ApparatTypeRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ApparatTypeRowDeleted As ApparatTypeRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddApparatTypeRow(ByVal row As ApparatTypeRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddApparatTypeRow(ByVal Name As String, ByVal Count As Integer, ByVal S1 As Single, ByVal S2 As Single, ByVal S3 As Single, ByVal S4 As Single) As ApparatTypeRow
            Dim rowApparatTypeRow As ApparatTypeRow = CType(Me.NewRow,ApparatTypeRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Name, Count, S1, S2, S3, S4}
            rowApparatTypeRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowApparatTypeRow)
            Return rowApparatTypeRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByID(ByVal ID As Long) As ApparatTypeRow
            Return CType(Me.Rows.Find(New Object() {ID}),ApparatTypeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ApparatTypeDataTable = CType(MyBase.Clone,ApparatTypeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ApparatTypeDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnName = MyBase.Columns("Name")
            Me.columnCount = MyBase.Columns("Count")
            Me.columnS1 = MyBase.Columns("S1")
            Me.columnS2 = MyBase.Columns("S2")
            Me.columnS3 = MyBase.Columns("S3")
            Me.columnS4 = MyBase.Columns("S4")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnName = New Global.System.Data.DataColumn("Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName)
            Me.columnCount = New Global.System.Data.DataColumn("Count", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCount)
            Me.columnS1 = New Global.System.Data.DataColumn("S1", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnS1)
            Me.columnS2 = New Global.System.Data.DataColumn("S2", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnS2)
            Me.columnS3 = New Global.System.Data.DataColumn("S3", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnS3)
            Me.columnS4 = New Global.System.Data.DataColumn("S4", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnS4)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = 1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnName.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewApparatTypeRow() As ApparatTypeRow
            Return CType(Me.NewRow,ApparatTypeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ApparatTypeRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ApparatTypeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ApparatTypeRowChangedEvent) Is Nothing) Then
                RaiseEvent ApparatTypeRowChanged(Me, New ApparatTypeRowChangeEvent(CType(e.Row,ApparatTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ApparatTypeRowChangingEvent) Is Nothing) Then
                RaiseEvent ApparatTypeRowChanging(Me, New ApparatTypeRowChangeEvent(CType(e.Row,ApparatTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ApparatTypeRowDeletedEvent) Is Nothing) Then
                RaiseEvent ApparatTypeRowDeleted(Me, New ApparatTypeRowChangeEvent(CType(e.Row,ApparatTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ApparatTypeRowDeletingEvent) Is Nothing) Then
                RaiseEvent ApparatTypeRowDeleting(Me, New ApparatTypeRowChangeEvent(CType(e.Row,ApparatTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveApparatTypeRow(ByVal row As ApparatTypeRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As GidrogasitelDataSet = New GidrogasitelDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ApparatTypeDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RezultDataTable
        Inherits Global.System.Data.TypedTableBase(Of RezultRow)
        
        Private columnSpeed As Global.System.Data.DataColumn
        
        Private columnP_inc As Global.System.Data.DataColumn
        
        Private columnP_dec As Global.System.Data.DataColumn
        
        Private columnB_inc As Global.System.Data.DataColumn
        
        Private columnB_dec As Global.System.Data.DataColumn
        
        Private columnE As Global.System.Data.DataColumn
        
        Private columnSymmetry As Global.System.Data.DataColumn
        
        Private columnValues As Global.System.Data.DataColumn
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnValues2 As Global.System.Data.DataColumn
        
        Private columnA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Rezult"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SpeedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSpeed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property P_incColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnP_inc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property P_decColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnP_dec
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property B_incColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnB_inc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property B_decColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnB_dec
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SymmetryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSymmetry
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ValuesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnValues
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Values2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnValues2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RezultRow
            Get
                Return CType(Me.Rows(index),RezultRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event RezultRowChanging As RezultRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event RezultRowChanged As RezultRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event RezultRowDeleting As RezultRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event RezultRowDeleted As RezultRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddRezultRow(ByVal row As RezultRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddRezultRow(ByVal Speed As Single, ByVal P_inc As Single, ByVal P_dec As Single, ByVal B_inc As Single, ByVal B_dec As Single, ByVal E As Single, ByVal Symmetry As Single, ByVal Values As String, ByVal Values2 As String, ByVal A As Single) As RezultRow
            Dim rowRezultRow As RezultRow = CType(Me.NewRow,RezultRow)
            Dim columnValuesArray() As Object = New Object() {Speed, P_inc, P_dec, B_inc, B_dec, E, Symmetry, Values, Nothing, Values2, A}
            rowRezultRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRezultRow)
            Return rowRezultRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByID(ByVal ID As Long) As RezultRow
            Return CType(Me.Rows.Find(New Object() {ID}),RezultRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RezultDataTable = CType(MyBase.Clone,RezultDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RezultDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnSpeed = MyBase.Columns("Speed")
            Me.columnP_inc = MyBase.Columns("P_inc")
            Me.columnP_dec = MyBase.Columns("P_dec")
            Me.columnB_inc = MyBase.Columns("B_inc")
            Me.columnB_dec = MyBase.Columns("B_dec")
            Me.columnE = MyBase.Columns("E")
            Me.columnSymmetry = MyBase.Columns("Symmetry")
            Me.columnValues = MyBase.Columns("Values")
            Me.columnID = MyBase.Columns("ID")
            Me.columnValues2 = MyBase.Columns("Values2")
            Me.columnA = MyBase.Columns("A")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnSpeed = New Global.System.Data.DataColumn("Speed", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSpeed)
            Me.columnP_inc = New Global.System.Data.DataColumn("P_inc", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnP_inc)
            Me.columnP_dec = New Global.System.Data.DataColumn("P_dec", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnP_dec)
            Me.columnB_inc = New Global.System.Data.DataColumn("B_inc", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnB_inc)
            Me.columnB_dec = New Global.System.Data.DataColumn("B_dec", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnB_dec)
            Me.columnE = New Global.System.Data.DataColumn("E", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnE)
            Me.columnSymmetry = New Global.System.Data.DataColumn("Symmetry", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSymmetry)
            Me.columnValues = New Global.System.Data.DataColumn("Values", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValues)
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnValues2 = New Global.System.Data.DataColumn("Values2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValues2)
            Me.columnA = New Global.System.Data.DataColumn("A", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnA)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnSpeed.DefaultValue = CType(0!,Single)
            Me.columnP_inc.DefaultValue = CType(0!,Single)
            Me.columnP_dec.DefaultValue = CType(0!,Single)
            Me.columnB_inc.DefaultValue = CType(0!,Single)
            Me.columnB_dec.DefaultValue = CType(0!,Single)
            Me.columnE.DefaultValue = CType(0!,Single)
            Me.columnSymmetry.DefaultValue = CType(0!,Single)
            Me.columnValues.DefaultValue = CType("",String)
            Me.columnValues.MaxLength = 536870911
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = 1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnValues2.DefaultValue = CType("",String)
            Me.columnValues2.MaxLength = 536870911
            Me.columnA.DefaultValue = CType(0!,Single)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewRezultRow() As RezultRow
            Return CType(Me.NewRow,RezultRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RezultRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RezultRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RezultRowChangedEvent) Is Nothing) Then
                RaiseEvent RezultRowChanged(Me, New RezultRowChangeEvent(CType(e.Row,RezultRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RezultRowChangingEvent) Is Nothing) Then
                RaiseEvent RezultRowChanging(Me, New RezultRowChangeEvent(CType(e.Row,RezultRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RezultRowDeletedEvent) Is Nothing) Then
                RaiseEvent RezultRowDeleted(Me, New RezultRowChangeEvent(CType(e.Row,RezultRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RezultRowDeletingEvent) Is Nothing) Then
                RaiseEvent RezultRowDeleting(Me, New RezultRowChangeEvent(CType(e.Row,RezultRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveRezultRow(ByVal row As RezultRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As GidrogasitelDataSet = New GidrogasitelDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RezultDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ApparatsDataTable
        Inherits Global.System.Data.TypedTableBase(Of ApparatsRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnName As Global.System.Data.DataColumn
        
        Private columnP_inc_s1 As Global.System.Data.DataColumn
        
        Private columnP_dec_s1 As Global.System.Data.DataColumn
        
        Private columnB_inc_s1 As Global.System.Data.DataColumn
        
        Private columnB_dec_s1 As Global.System.Data.DataColumn
        
        Private columnE_s1 As Global.System.Data.DataColumn
        
        Private columnSymmetry_s1 As Global.System.Data.DataColumn
        
        Private columnP_inc_s2 As Global.System.Data.DataColumn
        
        Private columnP_dec_s2 As Global.System.Data.DataColumn
        
        Private columnB_inc_s2 As Global.System.Data.DataColumn
        
        Private columnB_dec_s2 As Global.System.Data.DataColumn
        
        Private columnE_s2 As Global.System.Data.DataColumn
        
        Private columnSymmetry_s2 As Global.System.Data.DataColumn
        
        Private columnP_inc_s3 As Global.System.Data.DataColumn
        
        Private columnP_dec_s3 As Global.System.Data.DataColumn
        
        Private columnB_inc_s3 As Global.System.Data.DataColumn
        
        Private columnB_dec_s3 As Global.System.Data.DataColumn
        
        Private columnE_s3 As Global.System.Data.DataColumn
        
        Private columnSymmetry_s3 As Global.System.Data.DataColumn
        
        Private columnP_inc_s4 As Global.System.Data.DataColumn
        
        Private columnP_dec_s4 As Global.System.Data.DataColumn
        
        Private columnB_inc_s4 As Global.System.Data.DataColumn
        
        Private columnB_dec_s4 As Global.System.Data.DataColumn
        
        Private columnE_s4 As Global.System.Data.DataColumn
        
        Private columnSymmetry_s4 As Global.System.Data.DataColumn
        
        Private columnCheck_s1 As Global.System.Data.DataColumn
        
        Private columnCheck_s2 As Global.System.Data.DataColumn
        
        Private columnCheck_s3 As Global.System.Data.DataColumn
        
        Private columnCheck_s4 As Global.System.Data.DataColumn
        
        Private columnProkachkaTime As Global.System.Data.DataColumn
        
        Private columnProkackaAmpl As Global.System.Data.DataColumn
        
        Private columnProkachkaSpeed As Global.System.Data.DataColumn
        
        Private columnProkachkaMotorSpeed As Global.System.Data.DataColumn
        
        Private columnProkachkaMotorSpeedMax As Global.System.Data.DataColumn
        
        Private columnS1_Time As Global.System.Data.DataColumn
        
        Private columnS1_Ampl As Global.System.Data.DataColumn
        
        Private columnS1_MotorSpeed As Global.System.Data.DataColumn
        
        Private columnS1_MotorSpeedMax As Global.System.Data.DataColumn
        
        Private columnS2_Time As Global.System.Data.DataColumn
        
        Private columnS2_Ampl As Global.System.Data.DataColumn
        
        Private columnS2_MotorSpeed As Global.System.Data.DataColumn
        
        Private columnS2_MotorSpeedMax As Global.System.Data.DataColumn
        
        Private columnS3_Time As Global.System.Data.DataColumn
        
        Private columnS3_Ampl As Global.System.Data.DataColumn
        
        Private columnS3_MotorSpeed As Global.System.Data.DataColumn
        
        Private columnS3_MotorSpeedMax As Global.System.Data.DataColumn
        
        Private columnS4_Time As Global.System.Data.DataColumn
        
        Private columnS4_Ampl As Global.System.Data.DataColumn
        
        Private columnS4_MotorSpeed As Global.System.Data.DataColumn
        
        Private columnS4_MotorSpeedMax As Global.System.Data.DataColumn
        
        Private columnd_nom As Global.System.Data.DataColumn
        
        Private columnd_hot As Global.System.Data.DataColumn
        
        Private columnd_cold As Global.System.Data.DataColumn
        
        Private columnType As Global.System.Data.DataColumn
        
        Private columnS1_Angle As Global.System.Data.DataColumn
        
        Private columnS2_Angle As Global.System.Data.DataColumn
        
        Private columnS3_Angle As Global.System.Data.DataColumn
        
        Private columnS4_Angle As Global.System.Data.DataColumn
        
        Private columnProkachkaAngle As Global.System.Data.DataColumn
        
        Private columnCheck_Prokachka As Global.System.Data.DataColumn
        
        Private columnS1_Speed1 As Global.System.Data.DataColumn
        
        Private columnS2_Speed2 As Global.System.Data.DataColumn
        
        Private columnS3_Speed3 As Global.System.Data.DataColumn
        
        Private columnS4_Speed4 As Global.System.Data.DataColumn
        
        Private columnDP_inc_s1 As Global.System.Data.DataColumn
        
        Private columnDP_inc_s2 As Global.System.Data.DataColumn
        
        Private columnDP_inc_s3 As Global.System.Data.DataColumn
        
        Private columnDP_inc_s4 As Global.System.Data.DataColumn
        
        Private columnDP_dec_s1 As Global.System.Data.DataColumn
        
        Private columnDP_dec_s2 As Global.System.Data.DataColumn
        
        Private columnDP_dec_s3 As Global.System.Data.DataColumn
        
        Private columnDP_dec_s4 As Global.System.Data.DataColumn
        
        Private columnDE_s1 As Global.System.Data.DataColumn
        
        Private columnDE_s2 As Global.System.Data.DataColumn
        
        Private columnDE_s3 As Global.System.Data.DataColumn
        
        Private columnDE_s4 As Global.System.Data.DataColumn
        
        Private columnReg_s1 As Global.System.Data.DataColumn
        
        Private columnReg_s2 As Global.System.Data.DataColumn
        
        Private columnReg_s3 As Global.System.Data.DataColumn
        
        Private columnReg_s4 As Global.System.Data.DataColumn
        
        Private columnBreg_s1 As Global.System.Data.DataColumn
        
        Private columnBreg_s2 As Global.System.Data.DataColumn
        
        Private columnBreg_s3 As Global.System.Data.DataColumn
        
        Private columnBreg_s4 As Global.System.Data.DataColumn
        
        Private columnEreg_s1 As Global.System.Data.DataColumn
        
        Private columnEreg_s2 As Global.System.Data.DataColumn
        
        Private columnEreg_s3 As Global.System.Data.DataColumn
        
        Private columnEreg_s4 As Global.System.Data.DataColumn
        
        Private columnSreg_s1 As Global.System.Data.DataColumn
        
        Private columnSreg_s2 As Global.System.Data.DataColumn
        
        Private columnSreg_s3 As Global.System.Data.DataColumn
        
        Private columnSreg_s4 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Apparats"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property P_inc_s1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnP_inc_s1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property P_dec_s1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnP_dec_s1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property B_inc_s1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnB_inc_s1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property B_dec_s1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnB_dec_s1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property E_s1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnE_s1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Symmetry_s1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSymmetry_s1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property P_inc_s2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnP_inc_s2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property P_dec_s2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnP_dec_s2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property B_inc_s2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnB_inc_s2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property B_dec_s2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnB_dec_s2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property E_s2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnE_s2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Symmetry_s2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSymmetry_s2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property P_inc_s3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnP_inc_s3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property P_dec_s3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnP_dec_s3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property B_inc_s3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnB_inc_s3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property B_dec_s3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnB_dec_s3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property E_s3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnE_s3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Symmetry_s3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSymmetry_s3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property P_inc_s4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnP_inc_s4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property P_dec_s4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnP_dec_s4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property B_inc_s4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnB_inc_s4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property B_dec_s4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnB_dec_s4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property E_s4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnE_s4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Symmetry_s4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSymmetry_s4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Check_s1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCheck_s1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Check_s2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCheck_s2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Check_s3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCheck_s3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Check_s4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCheck_s4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ProkachkaTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProkachkaTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ProkackaAmplColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProkackaAmpl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ProkachkaSpeedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProkachkaSpeed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ProkachkaMotorSpeedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProkachkaMotorSpeed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ProkachkaMotorSpeedMaxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProkachkaMotorSpeedMax
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property S1_TimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnS1_Time
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property S1_AmplColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnS1_Ampl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property S1_MotorSpeedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnS1_MotorSpeed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property S1_MotorSpeedMaxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnS1_MotorSpeedMax
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property S2_TimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnS2_Time
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property S2_AmplColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnS2_Ampl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property S2_MotorSpeedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnS2_MotorSpeed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property S2_MotorSpeedMaxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnS2_MotorSpeedMax
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property S3_TimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnS3_Time
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property S3_AmplColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnS3_Ampl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property S3_MotorSpeedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnS3_MotorSpeed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property S3_MotorSpeedMaxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnS3_MotorSpeedMax
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property S4_TimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnS4_Time
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property S4_AmplColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnS4_Ampl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property S4_MotorSpeedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnS4_MotorSpeed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property S4_MotorSpeedMaxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnS4_MotorSpeedMax
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property d_nomColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnd_nom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property d_hotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnd_hot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property d_coldColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnd_cold
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property S1_AngleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnS1_Angle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property S2_AngleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnS2_Angle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property S3_AngleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnS3_Angle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property S4_AngleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnS4_Angle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ProkachkaAngleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProkachkaAngle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Check_ProkachkaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCheck_Prokachka
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property S1_Speed1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnS1_Speed1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property S2_Speed2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnS2_Speed2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property S3_Speed3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnS3_Speed3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property S4_Speed4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnS4_Speed4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DP_inc_s1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDP_inc_s1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DP_inc_s2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDP_inc_s2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DP_inc_s3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDP_inc_s3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DP_inc_s4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDP_inc_s4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DP_dec_s1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDP_dec_s1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DP_dec_s2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDP_dec_s2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DP_dec_s3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDP_dec_s3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DP_dec_s4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDP_dec_s4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DE_s1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDE_s1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DE_s2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDE_s2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DE_s3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDE_s3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DE_s4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDE_s4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Reg_s1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnReg_s1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Reg_s2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnReg_s2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Reg_s3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnReg_s3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Reg_s4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnReg_s4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Breg_s1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBreg_s1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Breg_s2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBreg_s2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Breg_s3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBreg_s3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Breg_s4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBreg_s4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Ereg_s1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEreg_s1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Ereg_s2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEreg_s2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Ereg_s3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEreg_s3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Ereg_s4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEreg_s4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Sreg_s1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSreg_s1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Sreg_s2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSreg_s2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Sreg_s3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSreg_s3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Sreg_s4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSreg_s4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ApparatsRow
            Get
                Return CType(Me.Rows(index),ApparatsRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ApparatsRowChanging As ApparatsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ApparatsRowChanged As ApparatsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ApparatsRowDeleting As ApparatsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ApparatsRowDeleted As ApparatsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddApparatsRow(ByVal row As ApparatsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddApparatsRow( _
                    ByVal Name As String,  _
                    ByVal P_inc_s1 As Single,  _
                    ByVal P_dec_s1 As Single,  _
                    ByVal B_inc_s1 As Single,  _
                    ByVal B_dec_s1 As Single,  _
                    ByVal E_s1 As Single,  _
                    ByVal Symmetry_s1 As Single,  _
                    ByVal P_inc_s2 As Single,  _
                    ByVal P_dec_s2 As Single,  _
                    ByVal B_inc_s2 As Single,  _
                    ByVal B_dec_s2 As Single,  _
                    ByVal E_s2 As Single,  _
                    ByVal Symmetry_s2 As Single,  _
                    ByVal P_inc_s3 As Single,  _
                    ByVal P_dec_s3 As Single,  _
                    ByVal B_inc_s3 As Single,  _
                    ByVal B_dec_s3 As Single,  _
                    ByVal E_s3 As Single,  _
                    ByVal Symmetry_s3 As Single,  _
                    ByVal P_inc_s4 As Single,  _
                    ByVal P_dec_s4 As Single,  _
                    ByVal B_inc_s4 As Single,  _
                    ByVal B_dec_s4 As Single,  _
                    ByVal E_s4 As Single,  _
                    ByVal Symmetry_s4 As Single,  _
                    ByVal Check_s1 As Integer,  _
                    ByVal Check_s2 As Integer,  _
                    ByVal Check_s3 As Integer,  _
                    ByVal Check_s4 As Integer,  _
                    ByVal ProkachkaTime As Integer,  _
                    ByVal ProkackaAmpl As Integer,  _
                    ByVal ProkachkaSpeed As Single,  _
                    ByVal ProkachkaMotorSpeed As Single,  _
                    ByVal ProkachkaMotorSpeedMax As Single,  _
                    ByVal S1_Time As Single,  _
                    ByVal S1_Ampl As Single,  _
                    ByVal S1_MotorSpeed As Single,  _
                    ByVal S1_MotorSpeedMax As Single,  _
                    ByVal S2_Time As Single,  _
                    ByVal S2_Ampl As Single,  _
                    ByVal S2_MotorSpeed As Single,  _
                    ByVal S2_MotorSpeedMax As Single,  _
                    ByVal S3_Time As Single,  _
                    ByVal S3_Ampl As Single,  _
                    ByVal S3_MotorSpeed As Single,  _
                    ByVal S3_MotorSpeedMax As Single,  _
                    ByVal S4_Time As Single,  _
                    ByVal S4_Ampl As Single,  _
                    ByVal S4_MotorSpeed As Single,  _
                    ByVal S4_MotorSpeedMax As Single,  _
                    ByVal d_nom As Single,  _
                    ByVal d_hot As Single,  _
                    ByVal d_cold As Single,  _
                    ByVal parentApparatTypeRowByApparatType_Apparats As ApparatTypeRow,  _
                    ByVal S1_Angle As Integer,  _
                    ByVal S2_Angle As Integer,  _
                    ByVal S3_Angle As Integer,  _
                    ByVal S4_Angle As Integer,  _
                    ByVal ProkachkaAngle As Integer,  _
                    ByVal Check_Prokachka As Integer,  _
                    ByVal S1_Speed1 As Single,  _
                    ByVal S2_Speed2 As Single,  _
                    ByVal S3_Speed3 As Single,  _
                    ByVal S4_Speed4 As Single,  _
                    ByVal DP_inc_s1 As Single,  _
                    ByVal DP_inc_s2 As Single,  _
                    ByVal DP_inc_s3 As Single,  _
                    ByVal DP_inc_s4 As Single,  _
                    ByVal DP_dec_s1 As Single,  _
                    ByVal DP_dec_s2 As Single,  _
                    ByVal DP_dec_s3 As Single,  _
                    ByVal DP_dec_s4 As Single,  _
                    ByVal DE_s1 As Single,  _
                    ByVal DE_s2 As Single,  _
                    ByVal DE_s3 As Single,  _
                    ByVal DE_s4 As Single,  _
                    ByVal Reg_s1 As Integer,  _
                    ByVal Reg_s2 As Integer,  _
                    ByVal Reg_s3 As Integer,  _
                    ByVal Reg_s4 As Integer,  _
                    ByVal Breg_s1 As Integer,  _
                    ByVal Breg_s2 As Integer,  _
                    ByVal Breg_s3 As Integer,  _
                    ByVal Breg_s4 As Integer,  _
                    ByVal Ereg_s1 As Integer,  _
                    ByVal Ereg_s2 As Integer,  _
                    ByVal Ereg_s3 As Integer,  _
                    ByVal Ereg_s4 As Integer,  _
                    ByVal Sreg_s1 As Integer,  _
                    ByVal Sreg_s2 As Integer,  _
                    ByVal Sreg_s3 As Integer,  _
                    ByVal Sreg_s4 As Integer) As ApparatsRow
            Dim rowApparatsRow As ApparatsRow = CType(Me.NewRow,ApparatsRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Name, P_inc_s1, P_dec_s1, B_inc_s1, B_dec_s1, E_s1, Symmetry_s1, P_inc_s2, P_dec_s2, B_inc_s2, B_dec_s2, E_s2, Symmetry_s2, P_inc_s3, P_dec_s3, B_inc_s3, B_dec_s3, E_s3, Symmetry_s3, P_inc_s4, P_dec_s4, B_inc_s4, B_dec_s4, E_s4, Symmetry_s4, Check_s1, Check_s2, Check_s3, Check_s4, ProkachkaTime, ProkackaAmpl, ProkachkaSpeed, ProkachkaMotorSpeed, ProkachkaMotorSpeedMax, S1_Time, S1_Ampl, S1_MotorSpeed, S1_MotorSpeedMax, S2_Time, S2_Ampl, S2_MotorSpeed, S2_MotorSpeedMax, S3_Time, S3_Ampl, S3_MotorSpeed, S3_MotorSpeedMax, S4_Time, S4_Ampl, S4_MotorSpeed, S4_MotorSpeedMax, d_nom, d_hot, d_cold, Nothing, S1_Angle, S2_Angle, S3_Angle, S4_Angle, ProkachkaAngle, Check_Prokachka, S1_Speed1, S2_Speed2, S3_Speed3, S4_Speed4, DP_inc_s1, DP_inc_s2, DP_inc_s3, DP_inc_s4, DP_dec_s1, DP_dec_s2, DP_dec_s3, DP_dec_s4, DE_s1, DE_s2, DE_s3, DE_s4, Reg_s1, Reg_s2, Reg_s3, Reg_s4, Breg_s1, Breg_s2, Breg_s3, Breg_s4, Ereg_s1, Ereg_s2, Ereg_s3, Ereg_s4, Sreg_s1, Sreg_s2, Sreg_s3, Sreg_s4}
            If (Not (parentApparatTypeRowByApparatType_Apparats) Is Nothing) Then
                columnValuesArray(54) = parentApparatTypeRowByApparatType_Apparats(0)
            End If
            rowApparatsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowApparatsRow)
            Return rowApparatsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByID(ByVal ID As Long) As ApparatsRow
            Return CType(Me.Rows.Find(New Object() {ID}),ApparatsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ApparatsDataTable = CType(MyBase.Clone,ApparatsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ApparatsDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnName = MyBase.Columns("Name")
            Me.columnP_inc_s1 = MyBase.Columns("P_inc_s1")
            Me.columnP_dec_s1 = MyBase.Columns("P_dec_s1")
            Me.columnB_inc_s1 = MyBase.Columns("B_inc_s1")
            Me.columnB_dec_s1 = MyBase.Columns("B_dec_s1")
            Me.columnE_s1 = MyBase.Columns("E_s1")
            Me.columnSymmetry_s1 = MyBase.Columns("Symmetry_s1")
            Me.columnP_inc_s2 = MyBase.Columns("P_inc_s2")
            Me.columnP_dec_s2 = MyBase.Columns("P_dec_s2")
            Me.columnB_inc_s2 = MyBase.Columns("B_inc_s2")
            Me.columnB_dec_s2 = MyBase.Columns("B_dec_s2")
            Me.columnE_s2 = MyBase.Columns("E_s2")
            Me.columnSymmetry_s2 = MyBase.Columns("Symmetry_s2")
            Me.columnP_inc_s3 = MyBase.Columns("P_inc_s3")
            Me.columnP_dec_s3 = MyBase.Columns("P_dec_s3")
            Me.columnB_inc_s3 = MyBase.Columns("B_inc_s3")
            Me.columnB_dec_s3 = MyBase.Columns("B_dec_s3")
            Me.columnE_s3 = MyBase.Columns("E_s3")
            Me.columnSymmetry_s3 = MyBase.Columns("Symmetry_s3")
            Me.columnP_inc_s4 = MyBase.Columns("P_inc_s4")
            Me.columnP_dec_s4 = MyBase.Columns("P_dec_s4")
            Me.columnB_inc_s4 = MyBase.Columns("B_inc_s4")
            Me.columnB_dec_s4 = MyBase.Columns("B_dec_s4")
            Me.columnE_s4 = MyBase.Columns("E_s4")
            Me.columnSymmetry_s4 = MyBase.Columns("Symmetry_s4")
            Me.columnCheck_s1 = MyBase.Columns("Check_s1")
            Me.columnCheck_s2 = MyBase.Columns("Check_s2")
            Me.columnCheck_s3 = MyBase.Columns("Check_s3")
            Me.columnCheck_s4 = MyBase.Columns("Check_s4")
            Me.columnProkachkaTime = MyBase.Columns("ProkachkaTime")
            Me.columnProkackaAmpl = MyBase.Columns("ProkackaAmpl")
            Me.columnProkachkaSpeed = MyBase.Columns("ProkachkaSpeed")
            Me.columnProkachkaMotorSpeed = MyBase.Columns("ProkachkaMotorSpeed")
            Me.columnProkachkaMotorSpeedMax = MyBase.Columns("ProkachkaMotorSpeedMax")
            Me.columnS1_Time = MyBase.Columns("S1_Time")
            Me.columnS1_Ampl = MyBase.Columns("S1_Ampl")
            Me.columnS1_MotorSpeed = MyBase.Columns("S1_MotorSpeed")
            Me.columnS1_MotorSpeedMax = MyBase.Columns("S1_MotorSpeedMax")
            Me.columnS2_Time = MyBase.Columns("S2_Time")
            Me.columnS2_Ampl = MyBase.Columns("S2_Ampl")
            Me.columnS2_MotorSpeed = MyBase.Columns("S2_MotorSpeed")
            Me.columnS2_MotorSpeedMax = MyBase.Columns("S2_MotorSpeedMax")
            Me.columnS3_Time = MyBase.Columns("S3_Time")
            Me.columnS3_Ampl = MyBase.Columns("S3_Ampl")
            Me.columnS3_MotorSpeed = MyBase.Columns("S3_MotorSpeed")
            Me.columnS3_MotorSpeedMax = MyBase.Columns("S3_MotorSpeedMax")
            Me.columnS4_Time = MyBase.Columns("S4_Time")
            Me.columnS4_Ampl = MyBase.Columns("S4_Ampl")
            Me.columnS4_MotorSpeed = MyBase.Columns("S4_MotorSpeed")
            Me.columnS4_MotorSpeedMax = MyBase.Columns("S4_MotorSpeedMax")
            Me.columnd_nom = MyBase.Columns("d_nom")
            Me.columnd_hot = MyBase.Columns("d_hot")
            Me.columnd_cold = MyBase.Columns("d_cold")
            Me.columnType = MyBase.Columns("Type")
            Me.columnS1_Angle = MyBase.Columns("S1_Angle")
            Me.columnS2_Angle = MyBase.Columns("S2_Angle")
            Me.columnS3_Angle = MyBase.Columns("S3_Angle")
            Me.columnS4_Angle = MyBase.Columns("S4_Angle")
            Me.columnProkachkaAngle = MyBase.Columns("ProkachkaAngle")
            Me.columnCheck_Prokachka = MyBase.Columns("Check_Prokachka")
            Me.columnS1_Speed1 = MyBase.Columns("S1_Speed1")
            Me.columnS2_Speed2 = MyBase.Columns("S2_Speed2")
            Me.columnS3_Speed3 = MyBase.Columns("S3_Speed3")
            Me.columnS4_Speed4 = MyBase.Columns("S4_Speed4")
            Me.columnDP_inc_s1 = MyBase.Columns("DP_inc_s1")
            Me.columnDP_inc_s2 = MyBase.Columns("DP_inc_s2")
            Me.columnDP_inc_s3 = MyBase.Columns("DP_inc_s3")
            Me.columnDP_inc_s4 = MyBase.Columns("DP_inc_s4")
            Me.columnDP_dec_s1 = MyBase.Columns("DP_dec_s1")
            Me.columnDP_dec_s2 = MyBase.Columns("DP_dec_s2")
            Me.columnDP_dec_s3 = MyBase.Columns("DP_dec_s3")
            Me.columnDP_dec_s4 = MyBase.Columns("DP_dec_s4")
            Me.columnDE_s1 = MyBase.Columns("DE_s1")
            Me.columnDE_s2 = MyBase.Columns("DE_s2")
            Me.columnDE_s3 = MyBase.Columns("DE_s3")
            Me.columnDE_s4 = MyBase.Columns("DE_s4")
            Me.columnReg_s1 = MyBase.Columns("Reg_s1")
            Me.columnReg_s2 = MyBase.Columns("Reg_s2")
            Me.columnReg_s3 = MyBase.Columns("Reg_s3")
            Me.columnReg_s4 = MyBase.Columns("Reg_s4")
            Me.columnBreg_s1 = MyBase.Columns("Breg_s1")
            Me.columnBreg_s2 = MyBase.Columns("Breg_s2")
            Me.columnBreg_s3 = MyBase.Columns("Breg_s3")
            Me.columnBreg_s4 = MyBase.Columns("Breg_s4")
            Me.columnEreg_s1 = MyBase.Columns("Ereg_s1")
            Me.columnEreg_s2 = MyBase.Columns("Ereg_s2")
            Me.columnEreg_s3 = MyBase.Columns("Ereg_s3")
            Me.columnEreg_s4 = MyBase.Columns("Ereg_s4")
            Me.columnSreg_s1 = MyBase.Columns("Sreg_s1")
            Me.columnSreg_s2 = MyBase.Columns("Sreg_s2")
            Me.columnSreg_s3 = MyBase.Columns("Sreg_s3")
            Me.columnSreg_s4 = MyBase.Columns("Sreg_s4")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnName = New Global.System.Data.DataColumn("Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName)
            Me.columnP_inc_s1 = New Global.System.Data.DataColumn("P_inc_s1", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnP_inc_s1)
            Me.columnP_dec_s1 = New Global.System.Data.DataColumn("P_dec_s1", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnP_dec_s1)
            Me.columnB_inc_s1 = New Global.System.Data.DataColumn("B_inc_s1", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnB_inc_s1)
            Me.columnB_dec_s1 = New Global.System.Data.DataColumn("B_dec_s1", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnB_dec_s1)
            Me.columnE_s1 = New Global.System.Data.DataColumn("E_s1", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnE_s1)
            Me.columnSymmetry_s1 = New Global.System.Data.DataColumn("Symmetry_s1", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSymmetry_s1)
            Me.columnP_inc_s2 = New Global.System.Data.DataColumn("P_inc_s2", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnP_inc_s2)
            Me.columnP_dec_s2 = New Global.System.Data.DataColumn("P_dec_s2", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnP_dec_s2)
            Me.columnB_inc_s2 = New Global.System.Data.DataColumn("B_inc_s2", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnB_inc_s2)
            Me.columnB_dec_s2 = New Global.System.Data.DataColumn("B_dec_s2", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnB_dec_s2)
            Me.columnE_s2 = New Global.System.Data.DataColumn("E_s2", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnE_s2)
            Me.columnSymmetry_s2 = New Global.System.Data.DataColumn("Symmetry_s2", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSymmetry_s2)
            Me.columnP_inc_s3 = New Global.System.Data.DataColumn("P_inc_s3", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnP_inc_s3)
            Me.columnP_dec_s3 = New Global.System.Data.DataColumn("P_dec_s3", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnP_dec_s3)
            Me.columnB_inc_s3 = New Global.System.Data.DataColumn("B_inc_s3", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnB_inc_s3)
            Me.columnB_dec_s3 = New Global.System.Data.DataColumn("B_dec_s3", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnB_dec_s3)
            Me.columnE_s3 = New Global.System.Data.DataColumn("E_s3", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnE_s3)
            Me.columnSymmetry_s3 = New Global.System.Data.DataColumn("Symmetry_s3", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSymmetry_s3)
            Me.columnP_inc_s4 = New Global.System.Data.DataColumn("P_inc_s4", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnP_inc_s4)
            Me.columnP_dec_s4 = New Global.System.Data.DataColumn("P_dec_s4", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnP_dec_s4)
            Me.columnB_inc_s4 = New Global.System.Data.DataColumn("B_inc_s4", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnB_inc_s4)
            Me.columnB_dec_s4 = New Global.System.Data.DataColumn("B_dec_s4", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnB_dec_s4)
            Me.columnE_s4 = New Global.System.Data.DataColumn("E_s4", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnE_s4)
            Me.columnSymmetry_s4 = New Global.System.Data.DataColumn("Symmetry_s4", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSymmetry_s4)
            Me.columnCheck_s1 = New Global.System.Data.DataColumn("Check_s1", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCheck_s1)
            Me.columnCheck_s2 = New Global.System.Data.DataColumn("Check_s2", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCheck_s2)
            Me.columnCheck_s3 = New Global.System.Data.DataColumn("Check_s3", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCheck_s3)
            Me.columnCheck_s4 = New Global.System.Data.DataColumn("Check_s4", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCheck_s4)
            Me.columnProkachkaTime = New Global.System.Data.DataColumn("ProkachkaTime", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProkachkaTime)
            Me.columnProkackaAmpl = New Global.System.Data.DataColumn("ProkackaAmpl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProkackaAmpl)
            Me.columnProkachkaSpeed = New Global.System.Data.DataColumn("ProkachkaSpeed", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProkachkaSpeed)
            Me.columnProkachkaMotorSpeed = New Global.System.Data.DataColumn("ProkachkaMotorSpeed", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProkachkaMotorSpeed)
            Me.columnProkachkaMotorSpeedMax = New Global.System.Data.DataColumn("ProkachkaMotorSpeedMax", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProkachkaMotorSpeedMax)
            Me.columnS1_Time = New Global.System.Data.DataColumn("S1_Time", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnS1_Time)
            Me.columnS1_Ampl = New Global.System.Data.DataColumn("S1_Ampl", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnS1_Ampl)
            Me.columnS1_MotorSpeed = New Global.System.Data.DataColumn("S1_MotorSpeed", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnS1_MotorSpeed)
            Me.columnS1_MotorSpeedMax = New Global.System.Data.DataColumn("S1_MotorSpeedMax", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnS1_MotorSpeedMax)
            Me.columnS2_Time = New Global.System.Data.DataColumn("S2_Time", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnS2_Time)
            Me.columnS2_Ampl = New Global.System.Data.DataColumn("S2_Ampl", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnS2_Ampl)
            Me.columnS2_MotorSpeed = New Global.System.Data.DataColumn("S2_MotorSpeed", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnS2_MotorSpeed)
            Me.columnS2_MotorSpeedMax = New Global.System.Data.DataColumn("S2_MotorSpeedMax", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnS2_MotorSpeedMax)
            Me.columnS3_Time = New Global.System.Data.DataColumn("S3_Time", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnS3_Time)
            Me.columnS3_Ampl = New Global.System.Data.DataColumn("S3_Ampl", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnS3_Ampl)
            Me.columnS3_MotorSpeed = New Global.System.Data.DataColumn("S3_MotorSpeed", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnS3_MotorSpeed)
            Me.columnS3_MotorSpeedMax = New Global.System.Data.DataColumn("S3_MotorSpeedMax", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnS3_MotorSpeedMax)
            Me.columnS4_Time = New Global.System.Data.DataColumn("S4_Time", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnS4_Time)
            Me.columnS4_Ampl = New Global.System.Data.DataColumn("S4_Ampl", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnS4_Ampl)
            Me.columnS4_MotorSpeed = New Global.System.Data.DataColumn("S4_MotorSpeed", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnS4_MotorSpeed)
            Me.columnS4_MotorSpeedMax = New Global.System.Data.DataColumn("S4_MotorSpeedMax", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnS4_MotorSpeedMax)
            Me.columnd_nom = New Global.System.Data.DataColumn("d_nom", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnd_nom)
            Me.columnd_hot = New Global.System.Data.DataColumn("d_hot", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnd_hot)
            Me.columnd_cold = New Global.System.Data.DataColumn("d_cold", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnd_cold)
            Me.columnType = New Global.System.Data.DataColumn("Type", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType)
            Me.columnS1_Angle = New Global.System.Data.DataColumn("S1_Angle", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnS1_Angle)
            Me.columnS2_Angle = New Global.System.Data.DataColumn("S2_Angle", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnS2_Angle)
            Me.columnS3_Angle = New Global.System.Data.DataColumn("S3_Angle", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnS3_Angle)
            Me.columnS4_Angle = New Global.System.Data.DataColumn("S4_Angle", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnS4_Angle)
            Me.columnProkachkaAngle = New Global.System.Data.DataColumn("ProkachkaAngle", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProkachkaAngle)
            Me.columnCheck_Prokachka = New Global.System.Data.DataColumn("Check_Prokachka", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCheck_Prokachka)
            Me.columnS1_Speed1 = New Global.System.Data.DataColumn("S1_Speed1", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnS1_Speed1)
            Me.columnS2_Speed2 = New Global.System.Data.DataColumn("S2_Speed2", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnS2_Speed2)
            Me.columnS3_Speed3 = New Global.System.Data.DataColumn("S3_Speed3", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnS3_Speed3)
            Me.columnS4_Speed4 = New Global.System.Data.DataColumn("S4_Speed4", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnS4_Speed4)
            Me.columnDP_inc_s1 = New Global.System.Data.DataColumn("DP_inc_s1", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDP_inc_s1)
            Me.columnDP_inc_s2 = New Global.System.Data.DataColumn("DP_inc_s2", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDP_inc_s2)
            Me.columnDP_inc_s3 = New Global.System.Data.DataColumn("DP_inc_s3", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDP_inc_s3)
            Me.columnDP_inc_s4 = New Global.System.Data.DataColumn("DP_inc_s4", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDP_inc_s4)
            Me.columnDP_dec_s1 = New Global.System.Data.DataColumn("DP_dec_s1", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDP_dec_s1)
            Me.columnDP_dec_s2 = New Global.System.Data.DataColumn("DP_dec_s2", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDP_dec_s2)
            Me.columnDP_dec_s3 = New Global.System.Data.DataColumn("DP_dec_s3", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDP_dec_s3)
            Me.columnDP_dec_s4 = New Global.System.Data.DataColumn("DP_dec_s4", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDP_dec_s4)
            Me.columnDE_s1 = New Global.System.Data.DataColumn("DE_s1", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDE_s1)
            Me.columnDE_s2 = New Global.System.Data.DataColumn("DE_s2", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDE_s2)
            Me.columnDE_s3 = New Global.System.Data.DataColumn("DE_s3", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDE_s3)
            Me.columnDE_s4 = New Global.System.Data.DataColumn("DE_s4", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDE_s4)
            Me.columnReg_s1 = New Global.System.Data.DataColumn("Reg_s1", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReg_s1)
            Me.columnReg_s2 = New Global.System.Data.DataColumn("Reg_s2", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReg_s2)
            Me.columnReg_s3 = New Global.System.Data.DataColumn("Reg_s3", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReg_s3)
            Me.columnReg_s4 = New Global.System.Data.DataColumn("Reg_s4", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReg_s4)
            Me.columnBreg_s1 = New Global.System.Data.DataColumn("Breg_s1", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBreg_s1)
            Me.columnBreg_s2 = New Global.System.Data.DataColumn("Breg_s2", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBreg_s2)
            Me.columnBreg_s3 = New Global.System.Data.DataColumn("Breg_s3", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBreg_s3)
            Me.columnBreg_s4 = New Global.System.Data.DataColumn("Breg_s4", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBreg_s4)
            Me.columnEreg_s1 = New Global.System.Data.DataColumn("Ereg_s1", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEreg_s1)
            Me.columnEreg_s2 = New Global.System.Data.DataColumn("Ereg_s2", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEreg_s2)
            Me.columnEreg_s3 = New Global.System.Data.DataColumn("Ereg_s3", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEreg_s3)
            Me.columnEreg_s4 = New Global.System.Data.DataColumn("Ereg_s4", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEreg_s4)
            Me.columnSreg_s1 = New Global.System.Data.DataColumn("Sreg_s1", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSreg_s1)
            Me.columnSreg_s2 = New Global.System.Data.DataColumn("Sreg_s2", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSreg_s2)
            Me.columnSreg_s3 = New Global.System.Data.DataColumn("Sreg_s3", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSreg_s3)
            Me.columnSreg_s4 = New Global.System.Data.DataColumn("Sreg_s4", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSreg_s4)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = 1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnName.DefaultValue = CType("Новый гаситель",String)
            Me.columnName.MaxLength = 30
            Me.columnP_inc_s1.DefaultValue = CType(3!,Single)
            Me.columnP_dec_s1.DefaultValue = CType(3!,Single)
            Me.columnB_inc_s1.DefaultValue = CType(40!,Single)
            Me.columnB_dec_s1.DefaultValue = CType(40!,Single)
            Me.columnE_s1.DefaultValue = CType(300!,Single)
            Me.columnSymmetry_s1.DefaultValue = CType(25!,Single)
            Me.columnP_inc_s2.DefaultValue = CType(5!,Single)
            Me.columnP_dec_s2.DefaultValue = CType(5!,Single)
            Me.columnB_inc_s2.DefaultValue = CType(30!,Single)
            Me.columnB_dec_s2.DefaultValue = CType(30!,Single)
            Me.columnE_s2.DefaultValue = CType(500!,Single)
            Me.columnSymmetry_s2.DefaultValue = CType(25!,Single)
            Me.columnP_inc_s3.DefaultValue = CType(7!,Single)
            Me.columnP_dec_s3.DefaultValue = CType(7!,Single)
            Me.columnB_inc_s3.DefaultValue = CType(25!,Single)
            Me.columnB_dec_s3.DefaultValue = CType(25!,Single)
            Me.columnE_s3.DefaultValue = CType(1000!,Single)
            Me.columnSymmetry_s3.DefaultValue = CType(25!,Single)
            Me.columnP_inc_s4.DefaultValue = CType(11!,Single)
            Me.columnP_dec_s4.DefaultValue = CType(11!,Single)
            Me.columnB_inc_s4.DefaultValue = CType(20!,Single)
            Me.columnB_dec_s4.DefaultValue = CType(20!,Single)
            Me.columnE_s4.DefaultValue = CType(1400!,Single)
            Me.columnSymmetry_s4.DefaultValue = CType(25!,Single)
            Me.columnCheck_s1.DefaultValue = CType(1,Integer)
            Me.columnCheck_s2.DefaultValue = CType(1,Integer)
            Me.columnCheck_s3.DefaultValue = CType(1,Integer)
            Me.columnCheck_s4.DefaultValue = CType(1,Integer)
            Me.columnProkachkaTime.DefaultValue = CType(300,Integer)
            Me.columnProkackaAmpl.DefaultValue = CType(38,Integer)
            Me.columnProkachkaSpeed.DefaultValue = CType(0.3!,Single)
            Me.columnProkachkaMotorSpeed.DefaultValue = CType(0!,Single)
            Me.columnProkachkaMotorSpeedMax.DefaultValue = CType(65!,Single)
            Me.columnS1_Time.DefaultValue = CType(300!,Single)
            Me.columnS1_Ampl.DefaultValue = CType(38!,Single)
            Me.columnS1_MotorSpeed.DefaultValue = CType(10!,Single)
            Me.columnS1_MotorSpeedMax.DefaultValue = CType(65!,Single)
            Me.columnS2_Time.DefaultValue = CType(300!,Single)
            Me.columnS2_Ampl.DefaultValue = CType(38!,Single)
            Me.columnS2_MotorSpeed.DefaultValue = CType(15!,Single)
            Me.columnS2_MotorSpeedMax.DefaultValue = CType(65!,Single)
            Me.columnS3_Time.DefaultValue = CType(300!,Single)
            Me.columnS3_Ampl.DefaultValue = CType(38!,Single)
            Me.columnS3_MotorSpeed.DefaultValue = CType(30!,Single)
            Me.columnS3_MotorSpeedMax.DefaultValue = CType(65!,Single)
            Me.columnS4_Time.DefaultValue = CType(90!,Single)
            Me.columnS4_Ampl.DefaultValue = CType(38!,Single)
            Me.columnS4_MotorSpeed.DefaultValue = CType(60!,Single)
            Me.columnS4_MotorSpeedMax.DefaultValue = CType(65!,Single)
            Me.columnd_nom.DefaultValue = CType(0!,Single)
            Me.columnd_hot.DefaultValue = CType(0!,Single)
            Me.columnd_cold.DefaultValue = CType(0!,Single)
            Me.columnType.DefaultValue = CType(1,Long)
            Me.columnS1_Angle.DefaultValue = CType(0,Integer)
            Me.columnS2_Angle.DefaultValue = CType(0,Integer)
            Me.columnS3_Angle.DefaultValue = CType(0,Integer)
            Me.columnS4_Angle.DefaultValue = CType(0,Integer)
            Me.columnProkachkaAngle.DefaultValue = CType(0,Integer)
            Me.columnCheck_Prokachka.DefaultValue = CType(0,Integer)
            Me.columnS1_Speed1.DefaultValue = CType(0.075!,Single)
            Me.columnS2_Speed2.DefaultValue = CType(0.15!,Single)
            Me.columnS3_Speed3.DefaultValue = CType(0.3!,Single)
            Me.columnS4_Speed4.DefaultValue = CType(0.6!,Single)
            Me.columnDP_inc_s1.DefaultValue = CType(1!,Single)
            Me.columnDP_inc_s2.DefaultValue = CType(2!,Single)
            Me.columnDP_inc_s3.DefaultValue = CType(3!,Single)
            Me.columnDP_inc_s4.DefaultValue = CType(4!,Single)
            Me.columnDP_dec_s1.DefaultValue = CType(1!,Single)
            Me.columnDP_dec_s2.DefaultValue = CType(2!,Single)
            Me.columnDP_dec_s3.DefaultValue = CType(3!,Single)
            Me.columnDP_dec_s4.DefaultValue = CType(4!,Single)
            Me.columnDE_s1.DefaultValue = CType(300!,Single)
            Me.columnDE_s2.DefaultValue = CType(300!,Single)
            Me.columnDE_s3.DefaultValue = CType(300!,Single)
            Me.columnDE_s4.DefaultValue = CType(300!,Single)
            Me.columnReg_s1.DefaultValue = CType(0,Integer)
            Me.columnReg_s2.DefaultValue = CType(0,Integer)
            Me.columnReg_s3.DefaultValue = CType(0,Integer)
            Me.columnReg_s4.DefaultValue = CType(0,Integer)
            Me.columnBreg_s1.DefaultValue = CType(0,Integer)
            Me.columnBreg_s2.DefaultValue = CType(0,Integer)
            Me.columnBreg_s3.DefaultValue = CType(0,Integer)
            Me.columnBreg_s4.DefaultValue = CType(0,Integer)
            Me.columnEreg_s1.DefaultValue = CType(0,Integer)
            Me.columnEreg_s2.DefaultValue = CType(0,Integer)
            Me.columnEreg_s3.DefaultValue = CType(0,Integer)
            Me.columnEreg_s4.DefaultValue = CType(0,Integer)
            Me.columnSreg_s1.DefaultValue = CType(0,Integer)
            Me.columnSreg_s2.DefaultValue = CType(0,Integer)
            Me.columnSreg_s3.DefaultValue = CType(0,Integer)
            Me.columnSreg_s4.DefaultValue = CType(0,Integer)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewApparatsRow() As ApparatsRow
            Return CType(Me.NewRow,ApparatsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ApparatsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ApparatsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ApparatsRowChangedEvent) Is Nothing) Then
                RaiseEvent ApparatsRowChanged(Me, New ApparatsRowChangeEvent(CType(e.Row,ApparatsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ApparatsRowChangingEvent) Is Nothing) Then
                RaiseEvent ApparatsRowChanging(Me, New ApparatsRowChangeEvent(CType(e.Row,ApparatsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ApparatsRowDeletedEvent) Is Nothing) Then
                RaiseEvent ApparatsRowDeleted(Me, New ApparatsRowChangeEvent(CType(e.Row,ApparatsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ApparatsRowDeletingEvent) Is Nothing) Then
                RaiseEvent ApparatsRowDeleting(Me, New ApparatsRowChangeEvent(CType(e.Row,ApparatsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveApparatsRow(ByVal row As ApparatsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As GidrogasitelDataSet = New GidrogasitelDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ApparatsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class mainRow
        Inherits Global.System.Data.DataRow
        
        Private tablemain As mainDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablemain = CType(Me.Table,mainDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Type() As Long
            Get
                If Me.IsTypeNull Then
                    Return -1
                Else
                    Return CType(Me(Me.tablemain.TypeColumn),Long)
                End If
            End Get
            Set
                Me(Me.tablemain.TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Num() As String
            Get
                If Me.IsNumNull Then
                    Return ""
                Else
                    Return CType(Me(Me.tablemain.NumColumn),String)
                End If
            End Get
            Set
                Me(Me.tablemain.NumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property _DateTime() As Date
            Get
                Try 
                    Return CType(Me(Me.tablemain._DateTimeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца '_DateTime' в таблице 'main' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemain._DateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Remont() As Long
            Get
                If Me.IsRemontNull Then
                    Return -1
                Else
                    Return CType(Me(Me.tablemain.RemontColumn),Long)
                End If
            End Get
            Set
                Me(Me.tablemain.RemontColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Appointment() As Long
            Get
                If Me.IsAppointmentNull Then
                    Return -1
                Else
                    Return CType(Me(Me.tablemain.AppointmentColumn),Long)
                End If
            End Get
            Set
                Me(Me.tablemain.AppointmentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property _Operator() As Long
            Get
                If Me.Is_OperatorNull Then
                    Return -1
                Else
                    Return CType(Me(Me.tablemain.OperatorColumn),Long)
                End If
            End Get
            Set
                Me(Me.tablemain.OperatorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Rezult1() As Long
            Get
                If Me.IsRezult1Null Then
                    Return -1
                Else
                    Return CType(Me(Me.tablemain.Rezult1Column),Long)
                End If
            End Get
            Set
                Me(Me.tablemain.Rezult1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Rezult2() As Long
            Get
                If Me.IsRezult2Null Then
                    Return -1
                Else
                    Return CType(Me(Me.tablemain.Rezult2Column),Long)
                End If
            End Get
            Set
                Me(Me.tablemain.Rezult2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Rezult3() As Long
            Get
                If Me.IsRezult3Null Then
                    Return -1
                Else
                    Return CType(Me(Me.tablemain.Rezult3Column),Long)
                End If
            End Get
            Set
                Me(Me.tablemain.Rezult3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ID() As Long
            Get
                Return CType(Me(Me.tablemain.IDColumn),Long)
            End Get
            Set
                Me(Me.tablemain.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Rezult4() As Long
            Get
                If Me.IsRezult4Null Then
                    Return -1
                Else
                    Return CType(Me(Me.tablemain.Rezult4Column),Long)
                End If
            End Get
            Set
                Me(Me.tablemain.Rezult4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Text() As String
            Get
                If Me.IsTextNull Then
                    Return Nothing
                Else
                    Return CType(Me(Me.tablemain.TextColumn),String)
                End If
            End Get
            Set
                Me(Me.tablemain.TextColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IsDel() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablemain.IsDelColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'IsDel' в таблице 'main' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemain.IsDelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RemontRow() As RemontRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Remont_main")),RemontRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Remont_main"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OperatorsRow() As OperatorsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Operators_main")),OperatorsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Operators_main"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RezultRow() As RezultRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Rezult1_main")),RezultRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Rezult1_main"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RezultRowByRezult2_main() As RezultRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Rezult2_main")),RezultRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Rezult2_main"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RezultRowByRezult_main() As RezultRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Rezult_main")),RezultRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Rezult_main"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ApparatsRow() As ApparatsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Apparats_main")),ApparatsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Apparats_main"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTypeNull() As Boolean
            Return Me.IsNull(Me.tablemain.TypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTypeNull()
            Me(Me.tablemain.TypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNumNull() As Boolean
            Return Me.IsNull(Me.tablemain.NumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNumNull()
            Me(Me.tablemain.NumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Is_DateTimeNull() As Boolean
            Return Me.IsNull(Me.tablemain._DateTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Set_DateTimeNull()
            Me(Me.tablemain._DateTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRemontNull() As Boolean
            Return Me.IsNull(Me.tablemain.RemontColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRemontNull()
            Me(Me.tablemain.RemontColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAppointmentNull() As Boolean
            Return Me.IsNull(Me.tablemain.AppointmentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAppointmentNull()
            Me(Me.tablemain.AppointmentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Is_OperatorNull() As Boolean
            Return Me.IsNull(Me.tablemain.OperatorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Set_OperatorNull()
            Me(Me.tablemain.OperatorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRezult1Null() As Boolean
            Return Me.IsNull(Me.tablemain.Rezult1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRezult1Null()
            Me(Me.tablemain.Rezult1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRezult2Null() As Boolean
            Return Me.IsNull(Me.tablemain.Rezult2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRezult2Null()
            Me(Me.tablemain.Rezult2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRezult3Null() As Boolean
            Return Me.IsNull(Me.tablemain.Rezult3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRezult3Null()
            Me(Me.tablemain.Rezult3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRezult4Null() As Boolean
            Return Me.IsNull(Me.tablemain.Rezult4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRezult4Null()
            Me(Me.tablemain.Rezult4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTextNull() As Boolean
            Return Me.IsNull(Me.tablemain.TextColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTextNull()
            Me(Me.tablemain.TextColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsIsDelNull() As Boolean
            Return Me.IsNull(Me.tablemain.IsDelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetIsDelNull()
            Me(Me.tablemain.IsDelColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class AppointmentRow
        Inherits Global.System.Data.DataRow
        
        Private tableAppointment As AppointmentDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAppointment = CType(Me.Table,AppointmentDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ID() As Long
            Get
                Return CType(Me(Me.tableAppointment.IDColumn),Long)
            End Get
            Set
                Me(Me.tableAppointment.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Appointment() As String
            Get
                Try 
                    Return CType(Me(Me.tableAppointment.AppointmentColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'Appointment' в таблице 'Appointment' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAppointment.AppointmentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAppointmentNull() As Boolean
            Return Me.IsNull(Me.tableAppointment.AppointmentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAppointmentNull()
            Me(Me.tableAppointment.AppointmentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetOperatorsRows() As OperatorsRow()
            If (Me.Table.ChildRelations("Appointment_Operators") Is Nothing) Then
                Return New OperatorsRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Appointment_Operators")),OperatorsRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class OperatorsRow
        Inherits Global.System.Data.DataRow
        
        Private tableOperators As OperatorsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOperators = CType(Me.Table,OperatorsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property First() As String
            Get
                If Me.IsFirstNull Then
                    Return Nothing
                Else
                    Return CType(Me(Me.tableOperators.FirstColumn),String)
                End If
            End Get
            Set
                Me(Me.tableOperators.FirstColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Second() As String
            Get
                If Me.IsSecondNull Then
                    Return Nothing
                Else
                    Return CType(Me(Me.tableOperators.SecondColumn),String)
                End If
            End Get
            Set
                Me(Me.tableOperators.SecondColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Last() As String
            Get
                If Me.IsLastNull Then
                    Return Nothing
                Else
                    Return CType(Me(Me.tableOperators.LastColumn),String)
                End If
            End Get
            Set
                Me(Me.tableOperators.LastColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ID() As Long
            Get
                Return CType(Me(Me.tableOperators.IDColumn),Long)
            End Get
            Set
                Me(Me.tableOperators.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Appointment() As Long
            Get
                Try 
                    Return CType(Me(Me.tableOperators.AppointmentColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'Appointment' в таблице 'Operators' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOperators.AppointmentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property AppointmentRow() As AppointmentRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Appointment_Operators")),AppointmentRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Appointment_Operators"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsFirstNull() As Boolean
            Return Me.IsNull(Me.tableOperators.FirstColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetFirstNull()
            Me(Me.tableOperators.FirstColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSecondNull() As Boolean
            Return Me.IsNull(Me.tableOperators.SecondColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSecondNull()
            Me(Me.tableOperators.SecondColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsLastNull() As Boolean
            Return Me.IsNull(Me.tableOperators.LastColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetLastNull()
            Me(Me.tableOperators.LastColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAppointmentNull() As Boolean
            Return Me.IsNull(Me.tableOperators.AppointmentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAppointmentNull()
            Me(Me.tableOperators.AppointmentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetmainRows() As mainRow()
            If (Me.Table.ChildRelations("Operators_main") Is Nothing) Then
                Return New mainRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Operators_main")),mainRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class RemontRow
        Inherits Global.System.Data.DataRow
        
        Private tableRemont As RemontDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRemont = CType(Me.Table,RemontDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Remont() As String
            Get
                Try 
                    Return CType(Me(Me.tableRemont.RemontColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'Remont' в таблице 'Remont' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRemont.RemontColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ID() As Long
            Get
                Return CType(Me(Me.tableRemont.IDColumn),Long)
            End Get
            Set
                Me(Me.tableRemont.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRemontNull() As Boolean
            Return Me.IsNull(Me.tableRemont.RemontColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRemontNull()
            Me(Me.tableRemont.RemontColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetmainRows() As mainRow()
            If (Me.Table.ChildRelations("Remont_main") Is Nothing) Then
                Return New mainRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Remont_main")),mainRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class ApparatTypeRow
        Inherits Global.System.Data.DataRow
        
        Private tableApparatType As ApparatTypeDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableApparatType = CType(Me.Table,ApparatTypeDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ID() As Long
            Get
                Return CType(Me(Me.tableApparatType.IDColumn),Long)
            End Get
            Set
                Me(Me.tableApparatType.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableApparatType.NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'Name' в таблице 'ApparatType' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparatType.NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Count() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableApparatType.CountColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'Count' в таблице 'ApparatType' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparatType.CountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property S1() As Single
            Get
                Try 
                    Return CType(Me(Me.tableApparatType.S1Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'S1' в таблице 'ApparatType' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparatType.S1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property S2() As Single
            Get
                Try 
                    Return CType(Me(Me.tableApparatType.S2Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'S2' в таблице 'ApparatType' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparatType.S2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property S3() As Single
            Get
                Try 
                    Return CType(Me(Me.tableApparatType.S3Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'S3' в таблице 'ApparatType' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparatType.S3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property S4() As Single
            Get
                Try 
                    Return CType(Me(Me.tableApparatType.S4Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'S4' в таблице 'ApparatType' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparatType.S4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNameNull() As Boolean
            Return Me.IsNull(Me.tableApparatType.NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNameNull()
            Me(Me.tableApparatType.NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCountNull() As Boolean
            Return Me.IsNull(Me.tableApparatType.CountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCountNull()
            Me(Me.tableApparatType.CountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsS1Null() As Boolean
            Return Me.IsNull(Me.tableApparatType.S1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetS1Null()
            Me(Me.tableApparatType.S1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsS2Null() As Boolean
            Return Me.IsNull(Me.tableApparatType.S2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetS2Null()
            Me(Me.tableApparatType.S2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsS3Null() As Boolean
            Return Me.IsNull(Me.tableApparatType.S3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetS3Null()
            Me(Me.tableApparatType.S3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsS4Null() As Boolean
            Return Me.IsNull(Me.tableApparatType.S4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetS4Null()
            Me(Me.tableApparatType.S4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetApparatsRows() As ApparatsRow()
            If (Me.Table.ChildRelations("ApparatType_Apparats") Is Nothing) Then
                Return New ApparatsRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("ApparatType_Apparats")),ApparatsRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class RezultRow
        Inherits Global.System.Data.DataRow
        
        Private tableRezult As RezultDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRezult = CType(Me.Table,RezultDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Speed() As Single
            Get
                Try 
                    Return CType(Me(Me.tableRezult.SpeedColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'Speed' в таблице 'Rezult' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRezult.SpeedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property P_inc() As Single
            Get
                Try 
                    Return CType(Me(Me.tableRezult.P_incColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'P_inc' в таблице 'Rezult' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRezult.P_incColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property P_dec() As Single
            Get
                Try 
                    Return CType(Me(Me.tableRezult.P_decColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'P_dec' в таблице 'Rezult' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRezult.P_decColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property B_inc() As Single
            Get
                Try 
                    Return CType(Me(Me.tableRezult.B_incColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'B_inc' в таблице 'Rezult' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRezult.B_incColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property B_dec() As Single
            Get
                Try 
                    Return CType(Me(Me.tableRezult.B_decColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'B_dec' в таблице 'Rezult' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRezult.B_decColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property E() As Single
            Get
                Try 
                    Return CType(Me(Me.tableRezult.EColumn),Single)
                Catch e1 As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'E' в таблице 'Rezult' равно DBNull.", e1)
                End Try
            End Get
            Set
                Me(Me.tableRezult.EColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Symmetry() As Single
            Get
                Try 
                    Return CType(Me(Me.tableRezult.SymmetryColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'Symmetry' в таблице 'Rezult' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRezult.SymmetryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Values() As String
            Get
                Try 
                    Return CType(Me(Me.tableRezult.ValuesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'Values' в таблице 'Rezult' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRezult.ValuesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ID() As Long
            Get
                Return CType(Me(Me.tableRezult.IDColumn),Long)
            End Get
            Set
                Me(Me.tableRezult.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Values2() As String
            Get
                Try 
                    Return CType(Me(Me.tableRezult.Values2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'Values2' в таблице 'Rezult' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRezult.Values2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property A() As Single
            Get
                Try 
                    Return CType(Me(Me.tableRezult.AColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'A' в таблице 'Rezult' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRezult.AColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSpeedNull() As Boolean
            Return Me.IsNull(Me.tableRezult.SpeedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSpeedNull()
            Me(Me.tableRezult.SpeedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsP_incNull() As Boolean
            Return Me.IsNull(Me.tableRezult.P_incColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetP_incNull()
            Me(Me.tableRezult.P_incColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsP_decNull() As Boolean
            Return Me.IsNull(Me.tableRezult.P_decColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetP_decNull()
            Me(Me.tableRezult.P_decColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsB_incNull() As Boolean
            Return Me.IsNull(Me.tableRezult.B_incColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetB_incNull()
            Me(Me.tableRezult.B_incColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsB_decNull() As Boolean
            Return Me.IsNull(Me.tableRezult.B_decColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetB_decNull()
            Me(Me.tableRezult.B_decColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsENull() As Boolean
            Return Me.IsNull(Me.tableRezult.EColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetENull()
            Me(Me.tableRezult.EColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSymmetryNull() As Boolean
            Return Me.IsNull(Me.tableRezult.SymmetryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSymmetryNull()
            Me(Me.tableRezult.SymmetryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsValuesNull() As Boolean
            Return Me.IsNull(Me.tableRezult.ValuesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetValuesNull()
            Me(Me.tableRezult.ValuesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsValues2Null() As Boolean
            Return Me.IsNull(Me.tableRezult.Values2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetValues2Null()
            Me(Me.tableRezult.Values2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsANull() As Boolean
            Return Me.IsNull(Me.tableRezult.AColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetANull()
            Me(Me.tableRezult.AColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetmainRows() As mainRow()
            If (Me.Table.ChildRelations("Rezult1_main") Is Nothing) Then
                Return New mainRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Rezult1_main")),mainRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetmainRowsByRezult2_main() As mainRow()
            If (Me.Table.ChildRelations("Rezult2_main") Is Nothing) Then
                Return New mainRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Rezult2_main")),mainRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetmainRowsByRezult_main() As mainRow()
            If (Me.Table.ChildRelations("Rezult_main") Is Nothing) Then
                Return New mainRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Rezult_main")),mainRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class ApparatsRow
        Inherits Global.System.Data.DataRow
        
        Private tableApparats As ApparatsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableApparats = CType(Me.Table,ApparatsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ID() As Long
            Get
                Return CType(Me(Me.tableApparats.IDColumn),Long)
            End Get
            Set
                Me(Me.tableApparats.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableApparats.NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'Name' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property P_inc_s1() As Single
            Get
                Try 
                    Return CType(Me(Me.tableApparats.P_inc_s1Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'P_inc_s1' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.P_inc_s1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property P_dec_s1() As Single
            Get
                Try 
                    Return CType(Me(Me.tableApparats.P_dec_s1Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'P_dec_s1' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.P_dec_s1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property B_inc_s1() As Single
            Get
                Try 
                    Return CType(Me(Me.tableApparats.B_inc_s1Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'B_inc_s1' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.B_inc_s1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property B_dec_s1() As Single
            Get
                Try 
                    Return CType(Me(Me.tableApparats.B_dec_s1Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'B_dec_s1' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.B_dec_s1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property E_s1() As Single
            Get
                Try 
                    Return CType(Me(Me.tableApparats.E_s1Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'E_s1' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.E_s1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Symmetry_s1() As Single
            Get
                Try 
                    Return CType(Me(Me.tableApparats.Symmetry_s1Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'Symmetry_s1' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.Symmetry_s1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property P_inc_s2() As Single
            Get
                Try 
                    Return CType(Me(Me.tableApparats.P_inc_s2Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'P_inc_s2' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.P_inc_s2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property P_dec_s2() As Single
            Get
                Try 
                    Return CType(Me(Me.tableApparats.P_dec_s2Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'P_dec_s2' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.P_dec_s2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property B_inc_s2() As Single
            Get
                Try 
                    Return CType(Me(Me.tableApparats.B_inc_s2Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'B_inc_s2' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.B_inc_s2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property B_dec_s2() As Single
            Get
                Try 
                    Return CType(Me(Me.tableApparats.B_dec_s2Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'B_dec_s2' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.B_dec_s2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property E_s2() As Single
            Get
                Try 
                    Return CType(Me(Me.tableApparats.E_s2Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'E_s2' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.E_s2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Symmetry_s2() As Single
            Get
                Try 
                    Return CType(Me(Me.tableApparats.Symmetry_s2Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'Symmetry_s2' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.Symmetry_s2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property P_inc_s3() As Single
            Get
                Try 
                    Return CType(Me(Me.tableApparats.P_inc_s3Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'P_inc_s3' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.P_inc_s3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property P_dec_s3() As Single
            Get
                Try 
                    Return CType(Me(Me.tableApparats.P_dec_s3Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'P_dec_s3' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.P_dec_s3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property B_inc_s3() As Single
            Get
                Try 
                    Return CType(Me(Me.tableApparats.B_inc_s3Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'B_inc_s3' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.B_inc_s3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property B_dec_s3() As Single
            Get
                Try 
                    Return CType(Me(Me.tableApparats.B_dec_s3Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'B_dec_s3' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.B_dec_s3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property E_s3() As Single
            Get
                Try 
                    Return CType(Me(Me.tableApparats.E_s3Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'E_s3' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.E_s3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Symmetry_s3() As Single
            Get
                Try 
                    Return CType(Me(Me.tableApparats.Symmetry_s3Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'Symmetry_s3' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.Symmetry_s3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property P_inc_s4() As Single
            Get
                Try 
                    Return CType(Me(Me.tableApparats.P_inc_s4Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'P_inc_s4' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.P_inc_s4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property P_dec_s4() As Single
            Get
                Try 
                    Return CType(Me(Me.tableApparats.P_dec_s4Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'P_dec_s4' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.P_dec_s4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property B_inc_s4() As Single
            Get
                Try 
                    Return CType(Me(Me.tableApparats.B_inc_s4Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'B_inc_s4' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.B_inc_s4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property B_dec_s4() As Single
            Get
                Try 
                    Return CType(Me(Me.tableApparats.B_dec_s4Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'B_dec_s4' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.B_dec_s4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property E_s4() As Single
            Get
                Try 
                    Return CType(Me(Me.tableApparats.E_s4Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'E_s4' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.E_s4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Symmetry_s4() As Single
            Get
                Try 
                    Return CType(Me(Me.tableApparats.Symmetry_s4Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'Symmetry_s4' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.Symmetry_s4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Check_s1() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableApparats.Check_s1Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'Check_s1' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.Check_s1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Check_s2() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableApparats.Check_s2Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'Check_s2' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.Check_s2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Check_s3() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableApparats.Check_s3Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'Check_s3' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.Check_s3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Check_s4() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableApparats.Check_s4Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'Check_s4' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.Check_s4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ProkachkaTime() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableApparats.ProkachkaTimeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'ProkachkaTime' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.ProkachkaTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ProkackaAmpl() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableApparats.ProkackaAmplColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'ProkackaAmpl' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.ProkackaAmplColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ProkachkaSpeed() As Single
            Get
                Try 
                    Return CType(Me(Me.tableApparats.ProkachkaSpeedColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'ProkachkaSpeed' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.ProkachkaSpeedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ProkachkaMotorSpeed() As Single
            Get
                Try 
                    Return CType(Me(Me.tableApparats.ProkachkaMotorSpeedColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'ProkachkaMotorSpeed' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.ProkachkaMotorSpeedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ProkachkaMotorSpeedMax() As Single
            Get
                Try 
                    Return CType(Me(Me.tableApparats.ProkachkaMotorSpeedMaxColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'ProkachkaMotorSpeedMax' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.ProkachkaMotorSpeedMaxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property S1_Time() As Single
            Get
                Try 
                    Return CType(Me(Me.tableApparats.S1_TimeColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'S1_Time' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.S1_TimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property S1_Ampl() As Single
            Get
                Try 
                    Return CType(Me(Me.tableApparats.S1_AmplColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'S1_Ampl' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.S1_AmplColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property S1_MotorSpeed() As Single
            Get
                Try 
                    Return CType(Me(Me.tableApparats.S1_MotorSpeedColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'S1_MotorSpeed' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.S1_MotorSpeedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property S1_MotorSpeedMax() As Single
            Get
                Try 
                    Return CType(Me(Me.tableApparats.S1_MotorSpeedMaxColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'S1_MotorSpeedMax' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.S1_MotorSpeedMaxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property S2_Time() As Single
            Get
                Try 
                    Return CType(Me(Me.tableApparats.S2_TimeColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'S2_Time' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.S2_TimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property S2_Ampl() As Single
            Get
                Try 
                    Return CType(Me(Me.tableApparats.S2_AmplColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'S2_Ampl' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.S2_AmplColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property S2_MotorSpeed() As Single
            Get
                Try 
                    Return CType(Me(Me.tableApparats.S2_MotorSpeedColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'S2_MotorSpeed' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.S2_MotorSpeedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property S2_MotorSpeedMax() As Single
            Get
                Try 
                    Return CType(Me(Me.tableApparats.S2_MotorSpeedMaxColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'S2_MotorSpeedMax' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.S2_MotorSpeedMaxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property S3_Time() As Single
            Get
                Try 
                    Return CType(Me(Me.tableApparats.S3_TimeColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'S3_Time' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.S3_TimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property S3_Ampl() As Single
            Get
                Try 
                    Return CType(Me(Me.tableApparats.S3_AmplColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'S3_Ampl' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.S3_AmplColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property S3_MotorSpeed() As Single
            Get
                Try 
                    Return CType(Me(Me.tableApparats.S3_MotorSpeedColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'S3_MotorSpeed' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.S3_MotorSpeedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property S3_MotorSpeedMax() As Single
            Get
                Try 
                    Return CType(Me(Me.tableApparats.S3_MotorSpeedMaxColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'S3_MotorSpeedMax' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.S3_MotorSpeedMaxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property S4_Time() As Single
            Get
                Try 
                    Return CType(Me(Me.tableApparats.S4_TimeColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'S4_Time' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.S4_TimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property S4_Ampl() As Single
            Get
                Try 
                    Return CType(Me(Me.tableApparats.S4_AmplColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'S4_Ampl' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.S4_AmplColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property S4_MotorSpeed() As Single
            Get
                Try 
                    Return CType(Me(Me.tableApparats.S4_MotorSpeedColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'S4_MotorSpeed' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.S4_MotorSpeedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property S4_MotorSpeedMax() As Single
            Get
                Try 
                    Return CType(Me(Me.tableApparats.S4_MotorSpeedMaxColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'S4_MotorSpeedMax' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.S4_MotorSpeedMaxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property d_nom() As Single
            Get
                Try 
                    Return CType(Me(Me.tableApparats.d_nomColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'd_nom' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.d_nomColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property d_hot() As Single
            Get
                Try 
                    Return CType(Me(Me.tableApparats.d_hotColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'd_hot' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.d_hotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property d_cold() As Single
            Get
                Try 
                    Return CType(Me(Me.tableApparats.d_coldColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'd_cold' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.d_coldColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Type() As Long
            Get
                Try 
                    Return CType(Me(Me.tableApparats.TypeColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'Type' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property S1_Angle() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableApparats.S1_AngleColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'S1_Angle' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.S1_AngleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property S2_Angle() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableApparats.S2_AngleColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'S2_Angle' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.S2_AngleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property S3_Angle() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableApparats.S3_AngleColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'S3_Angle' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.S3_AngleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property S4_Angle() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableApparats.S4_AngleColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'S4_Angle' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.S4_AngleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ProkachkaAngle() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableApparats.ProkachkaAngleColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'ProkachkaAngle' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.ProkachkaAngleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Check_Prokachka() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableApparats.Check_ProkachkaColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'Check_Prokachka' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.Check_ProkachkaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property S1_Speed1() As Single
            Get
                Try 
                    Return CType(Me(Me.tableApparats.S1_Speed1Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'S1_Speed1' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.S1_Speed1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property S2_Speed2() As Single
            Get
                Try 
                    Return CType(Me(Me.tableApparats.S2_Speed2Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'S2_Speed2' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.S2_Speed2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property S3_Speed3() As Single
            Get
                Try 
                    Return CType(Me(Me.tableApparats.S3_Speed3Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'S3_Speed3' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.S3_Speed3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property S4_Speed4() As Single
            Get
                Try 
                    Return CType(Me(Me.tableApparats.S4_Speed4Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'S4_Speed4' в таблице 'Apparats' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableApparats.S4_Speed4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DP_inc_s1() As Single
            Get
                If Me.IsDP_inc_s1Null Then
                    Return 0!
                Else
                    Return CType(Me(Me.tableApparats.DP_inc_s1Column),Single)
                End If
            End Get
            Set
                Me(Me.tableApparats.DP_inc_s1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DP_inc_s2() As Single
            Get
                If Me.IsDP_inc_s2Null Then
                    Return 0!
                Else
                    Return CType(Me(Me.tableApparats.DP_inc_s2Column),Single)
                End If
            End Get
            Set
                Me(Me.tableApparats.DP_inc_s2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DP_inc_s3() As Single
            Get
                If Me.IsDP_inc_s3Null Then
                    Return 0!
                Else
                    Return CType(Me(Me.tableApparats.DP_inc_s3Column),Single)
                End If
            End Get
            Set
                Me(Me.tableApparats.DP_inc_s3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DP_inc_s4() As Single
            Get
                If Me.IsDP_inc_s4Null Then
                    Return 0!
                Else
                    Return CType(Me(Me.tableApparats.DP_inc_s4Column),Single)
                End If
            End Get
            Set
                Me(Me.tableApparats.DP_inc_s4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DP_dec_s1() As Single
            Get
                If Me.IsDP_dec_s1Null Then
                    Return 0!
                Else
                    Return CType(Me(Me.tableApparats.DP_dec_s1Column),Single)
                End If
            End Get
            Set
                Me(Me.tableApparats.DP_dec_s1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DP_dec_s2() As Single
            Get
                If Me.IsDP_dec_s2Null Then
                    Return 0!
                Else
                    Return CType(Me(Me.tableApparats.DP_dec_s2Column),Single)
                End If
            End Get
            Set
                Me(Me.tableApparats.DP_dec_s2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DP_dec_s3() As Single
            Get
                If Me.IsDP_dec_s3Null Then
                    Return 0!
                Else
                    Return CType(Me(Me.tableApparats.DP_dec_s3Column),Single)
                End If
            End Get
            Set
                Me(Me.tableApparats.DP_dec_s3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DP_dec_s4() As Single
            Get
                If Me.IsDP_dec_s4Null Then
                    Return 0!
                Else
                    Return CType(Me(Me.tableApparats.DP_dec_s4Column),Single)
                End If
            End Get
            Set
                Me(Me.tableApparats.DP_dec_s4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DE_s1() As Single
            Get
                If Me.IsDE_s1Null Then
                    Return 0!
                Else
                    Return CType(Me(Me.tableApparats.DE_s1Column),Single)
                End If
            End Get
            Set
                Me(Me.tableApparats.DE_s1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DE_s2() As Single
            Get
                If Me.IsDE_s2Null Then
                    Return 0!
                Else
                    Return CType(Me(Me.tableApparats.DE_s2Column),Single)
                End If
            End Get
            Set
                Me(Me.tableApparats.DE_s2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DE_s3() As Single
            Get
                If Me.IsDE_s3Null Then
                    Return 0!
                Else
                    Return CType(Me(Me.tableApparats.DE_s3Column),Single)
                End If
            End Get
            Set
                Me(Me.tableApparats.DE_s3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DE_s4() As Single
            Get
                If Me.IsDE_s4Null Then
                    Return 0!
                Else
                    Return CType(Me(Me.tableApparats.DE_s4Column),Single)
                End If
            End Get
            Set
                Me(Me.tableApparats.DE_s4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Reg_s1() As Integer
            Get
                If Me.IsReg_s1Null Then
                    Return 0
                Else
                    Return CType(Me(Me.tableApparats.Reg_s1Column),Integer)
                End If
            End Get
            Set
                Me(Me.tableApparats.Reg_s1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Reg_s2() As Integer
            Get
                If Me.IsReg_s2Null Then
                    Return 0
                Else
                    Return CType(Me(Me.tableApparats.Reg_s2Column),Integer)
                End If
            End Get
            Set
                Me(Me.tableApparats.Reg_s2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Reg_s3() As Integer
            Get
                If Me.IsReg_s3Null Then
                    Return 0
                Else
                    Return CType(Me(Me.tableApparats.Reg_s3Column),Integer)
                End If
            End Get
            Set
                Me(Me.tableApparats.Reg_s3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Reg_s4() As Integer
            Get
                If Me.IsReg_s4Null Then
                    Return 0
                Else
                    Return CType(Me(Me.tableApparats.Reg_s4Column),Integer)
                End If
            End Get
            Set
                Me(Me.tableApparats.Reg_s4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Breg_s1() As Integer
            Get
                If Me.IsBreg_s1Null Then
                    Return 0
                Else
                    Return CType(Me(Me.tableApparats.Breg_s1Column),Integer)
                End If
            End Get
            Set
                Me(Me.tableApparats.Breg_s1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Breg_s2() As Integer
            Get
                If Me.IsBreg_s2Null Then
                    Return 0
                Else
                    Return CType(Me(Me.tableApparats.Breg_s2Column),Integer)
                End If
            End Get
            Set
                Me(Me.tableApparats.Breg_s2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Breg_s3() As Integer
            Get
                If Me.IsBreg_s3Null Then
                    Return 0
                Else
                    Return CType(Me(Me.tableApparats.Breg_s3Column),Integer)
                End If
            End Get
            Set
                Me(Me.tableApparats.Breg_s3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Breg_s4() As Integer
            Get
                If Me.IsBreg_s4Null Then
                    Return 0
                Else
                    Return CType(Me(Me.tableApparats.Breg_s4Column),Integer)
                End If
            End Get
            Set
                Me(Me.tableApparats.Breg_s4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Ereg_s1() As Integer
            Get
                If Me.IsEreg_s1Null Then
                    Return 0
                Else
                    Return CType(Me(Me.tableApparats.Ereg_s1Column),Integer)
                End If
            End Get
            Set
                Me(Me.tableApparats.Ereg_s1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Ereg_s2() As Integer
            Get
                If Me.IsEreg_s2Null Then
                    Return 0
                Else
                    Return CType(Me(Me.tableApparats.Ereg_s2Column),Integer)
                End If
            End Get
            Set
                Me(Me.tableApparats.Ereg_s2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Ereg_s3() As Integer
            Get
                If Me.IsEreg_s3Null Then
                    Return 0
                Else
                    Return CType(Me(Me.tableApparats.Ereg_s3Column),Integer)
                End If
            End Get
            Set
                Me(Me.tableApparats.Ereg_s3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Ereg_s4() As Integer
            Get
                If Me.IsEreg_s4Null Then
                    Return 0
                Else
                    Return CType(Me(Me.tableApparats.Ereg_s4Column),Integer)
                End If
            End Get
            Set
                Me(Me.tableApparats.Ereg_s4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Sreg_s1() As Integer
            Get
                If Me.IsSreg_s1Null Then
                    Return 0
                Else
                    Return CType(Me(Me.tableApparats.Sreg_s1Column),Integer)
                End If
            End Get
            Set
                Me(Me.tableApparats.Sreg_s1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Sreg_s2() As Integer
            Get
                If Me.IsSreg_s2Null Then
                    Return 0
                Else
                    Return CType(Me(Me.tableApparats.Sreg_s2Column),Integer)
                End If
            End Get
            Set
                Me(Me.tableApparats.Sreg_s2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Sreg_s3() As Integer
            Get
                If Me.IsSreg_s3Null Then
                    Return 0
                Else
                    Return CType(Me(Me.tableApparats.Sreg_s3Column),Integer)
                End If
            End Get
            Set
                Me(Me.tableApparats.Sreg_s3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Sreg_s4() As Integer
            Get
                If Me.IsSreg_s4Null Then
                    Return 0
                Else
                    Return CType(Me(Me.tableApparats.Sreg_s4Column),Integer)
                End If
            End Get
            Set
                Me(Me.tableApparats.Sreg_s4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ApparatTypeRow() As ApparatTypeRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ApparatType_Apparats")),ApparatTypeRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ApparatType_Apparats"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNameNull() As Boolean
            Return Me.IsNull(Me.tableApparats.NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNameNull()
            Me(Me.tableApparats.NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsP_inc_s1Null() As Boolean
            Return Me.IsNull(Me.tableApparats.P_inc_s1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetP_inc_s1Null()
            Me(Me.tableApparats.P_inc_s1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsP_dec_s1Null() As Boolean
            Return Me.IsNull(Me.tableApparats.P_dec_s1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetP_dec_s1Null()
            Me(Me.tableApparats.P_dec_s1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsB_inc_s1Null() As Boolean
            Return Me.IsNull(Me.tableApparats.B_inc_s1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetB_inc_s1Null()
            Me(Me.tableApparats.B_inc_s1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsB_dec_s1Null() As Boolean
            Return Me.IsNull(Me.tableApparats.B_dec_s1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetB_dec_s1Null()
            Me(Me.tableApparats.B_dec_s1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsE_s1Null() As Boolean
            Return Me.IsNull(Me.tableApparats.E_s1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetE_s1Null()
            Me(Me.tableApparats.E_s1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSymmetry_s1Null() As Boolean
            Return Me.IsNull(Me.tableApparats.Symmetry_s1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSymmetry_s1Null()
            Me(Me.tableApparats.Symmetry_s1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsP_inc_s2Null() As Boolean
            Return Me.IsNull(Me.tableApparats.P_inc_s2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetP_inc_s2Null()
            Me(Me.tableApparats.P_inc_s2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsP_dec_s2Null() As Boolean
            Return Me.IsNull(Me.tableApparats.P_dec_s2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetP_dec_s2Null()
            Me(Me.tableApparats.P_dec_s2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsB_inc_s2Null() As Boolean
            Return Me.IsNull(Me.tableApparats.B_inc_s2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetB_inc_s2Null()
            Me(Me.tableApparats.B_inc_s2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsB_dec_s2Null() As Boolean
            Return Me.IsNull(Me.tableApparats.B_dec_s2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetB_dec_s2Null()
            Me(Me.tableApparats.B_dec_s2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsE_s2Null() As Boolean
            Return Me.IsNull(Me.tableApparats.E_s2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetE_s2Null()
            Me(Me.tableApparats.E_s2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSymmetry_s2Null() As Boolean
            Return Me.IsNull(Me.tableApparats.Symmetry_s2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSymmetry_s2Null()
            Me(Me.tableApparats.Symmetry_s2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsP_inc_s3Null() As Boolean
            Return Me.IsNull(Me.tableApparats.P_inc_s3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetP_inc_s3Null()
            Me(Me.tableApparats.P_inc_s3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsP_dec_s3Null() As Boolean
            Return Me.IsNull(Me.tableApparats.P_dec_s3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetP_dec_s3Null()
            Me(Me.tableApparats.P_dec_s3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsB_inc_s3Null() As Boolean
            Return Me.IsNull(Me.tableApparats.B_inc_s3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetB_inc_s3Null()
            Me(Me.tableApparats.B_inc_s3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsB_dec_s3Null() As Boolean
            Return Me.IsNull(Me.tableApparats.B_dec_s3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetB_dec_s3Null()
            Me(Me.tableApparats.B_dec_s3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsE_s3Null() As Boolean
            Return Me.IsNull(Me.tableApparats.E_s3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetE_s3Null()
            Me(Me.tableApparats.E_s3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSymmetry_s3Null() As Boolean
            Return Me.IsNull(Me.tableApparats.Symmetry_s3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSymmetry_s3Null()
            Me(Me.tableApparats.Symmetry_s3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsP_inc_s4Null() As Boolean
            Return Me.IsNull(Me.tableApparats.P_inc_s4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetP_inc_s4Null()
            Me(Me.tableApparats.P_inc_s4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsP_dec_s4Null() As Boolean
            Return Me.IsNull(Me.tableApparats.P_dec_s4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetP_dec_s4Null()
            Me(Me.tableApparats.P_dec_s4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsB_inc_s4Null() As Boolean
            Return Me.IsNull(Me.tableApparats.B_inc_s4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetB_inc_s4Null()
            Me(Me.tableApparats.B_inc_s4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsB_dec_s4Null() As Boolean
            Return Me.IsNull(Me.tableApparats.B_dec_s4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetB_dec_s4Null()
            Me(Me.tableApparats.B_dec_s4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsE_s4Null() As Boolean
            Return Me.IsNull(Me.tableApparats.E_s4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetE_s4Null()
            Me(Me.tableApparats.E_s4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSymmetry_s4Null() As Boolean
            Return Me.IsNull(Me.tableApparats.Symmetry_s4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSymmetry_s4Null()
            Me(Me.tableApparats.Symmetry_s4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCheck_s1Null() As Boolean
            Return Me.IsNull(Me.tableApparats.Check_s1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCheck_s1Null()
            Me(Me.tableApparats.Check_s1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCheck_s2Null() As Boolean
            Return Me.IsNull(Me.tableApparats.Check_s2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCheck_s2Null()
            Me(Me.tableApparats.Check_s2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCheck_s3Null() As Boolean
            Return Me.IsNull(Me.tableApparats.Check_s3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCheck_s3Null()
            Me(Me.tableApparats.Check_s3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCheck_s4Null() As Boolean
            Return Me.IsNull(Me.tableApparats.Check_s4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCheck_s4Null()
            Me(Me.tableApparats.Check_s4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsProkachkaTimeNull() As Boolean
            Return Me.IsNull(Me.tableApparats.ProkachkaTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetProkachkaTimeNull()
            Me(Me.tableApparats.ProkachkaTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsProkackaAmplNull() As Boolean
            Return Me.IsNull(Me.tableApparats.ProkackaAmplColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetProkackaAmplNull()
            Me(Me.tableApparats.ProkackaAmplColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsProkachkaSpeedNull() As Boolean
            Return Me.IsNull(Me.tableApparats.ProkachkaSpeedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetProkachkaSpeedNull()
            Me(Me.tableApparats.ProkachkaSpeedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsProkachkaMotorSpeedNull() As Boolean
            Return Me.IsNull(Me.tableApparats.ProkachkaMotorSpeedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetProkachkaMotorSpeedNull()
            Me(Me.tableApparats.ProkachkaMotorSpeedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsProkachkaMotorSpeedMaxNull() As Boolean
            Return Me.IsNull(Me.tableApparats.ProkachkaMotorSpeedMaxColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetProkachkaMotorSpeedMaxNull()
            Me(Me.tableApparats.ProkachkaMotorSpeedMaxColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsS1_TimeNull() As Boolean
            Return Me.IsNull(Me.tableApparats.S1_TimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetS1_TimeNull()
            Me(Me.tableApparats.S1_TimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsS1_AmplNull() As Boolean
            Return Me.IsNull(Me.tableApparats.S1_AmplColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetS1_AmplNull()
            Me(Me.tableApparats.S1_AmplColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsS1_MotorSpeedNull() As Boolean
            Return Me.IsNull(Me.tableApparats.S1_MotorSpeedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetS1_MotorSpeedNull()
            Me(Me.tableApparats.S1_MotorSpeedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsS1_MotorSpeedMaxNull() As Boolean
            Return Me.IsNull(Me.tableApparats.S1_MotorSpeedMaxColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetS1_MotorSpeedMaxNull()
            Me(Me.tableApparats.S1_MotorSpeedMaxColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsS2_TimeNull() As Boolean
            Return Me.IsNull(Me.tableApparats.S2_TimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetS2_TimeNull()
            Me(Me.tableApparats.S2_TimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsS2_AmplNull() As Boolean
            Return Me.IsNull(Me.tableApparats.S2_AmplColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetS2_AmplNull()
            Me(Me.tableApparats.S2_AmplColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsS2_MotorSpeedNull() As Boolean
            Return Me.IsNull(Me.tableApparats.S2_MotorSpeedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetS2_MotorSpeedNull()
            Me(Me.tableApparats.S2_MotorSpeedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsS2_MotorSpeedMaxNull() As Boolean
            Return Me.IsNull(Me.tableApparats.S2_MotorSpeedMaxColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetS2_MotorSpeedMaxNull()
            Me(Me.tableApparats.S2_MotorSpeedMaxColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsS3_TimeNull() As Boolean
            Return Me.IsNull(Me.tableApparats.S3_TimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetS3_TimeNull()
            Me(Me.tableApparats.S3_TimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsS3_AmplNull() As Boolean
            Return Me.IsNull(Me.tableApparats.S3_AmplColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetS3_AmplNull()
            Me(Me.tableApparats.S3_AmplColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsS3_MotorSpeedNull() As Boolean
            Return Me.IsNull(Me.tableApparats.S3_MotorSpeedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetS3_MotorSpeedNull()
            Me(Me.tableApparats.S3_MotorSpeedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsS3_MotorSpeedMaxNull() As Boolean
            Return Me.IsNull(Me.tableApparats.S3_MotorSpeedMaxColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetS3_MotorSpeedMaxNull()
            Me(Me.tableApparats.S3_MotorSpeedMaxColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsS4_TimeNull() As Boolean
            Return Me.IsNull(Me.tableApparats.S4_TimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetS4_TimeNull()
            Me(Me.tableApparats.S4_TimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsS4_AmplNull() As Boolean
            Return Me.IsNull(Me.tableApparats.S4_AmplColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetS4_AmplNull()
            Me(Me.tableApparats.S4_AmplColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsS4_MotorSpeedNull() As Boolean
            Return Me.IsNull(Me.tableApparats.S4_MotorSpeedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetS4_MotorSpeedNull()
            Me(Me.tableApparats.S4_MotorSpeedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsS4_MotorSpeedMaxNull() As Boolean
            Return Me.IsNull(Me.tableApparats.S4_MotorSpeedMaxColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetS4_MotorSpeedMaxNull()
            Me(Me.tableApparats.S4_MotorSpeedMaxColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isd_nomNull() As Boolean
            Return Me.IsNull(Me.tableApparats.d_nomColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setd_nomNull()
            Me(Me.tableApparats.d_nomColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isd_hotNull() As Boolean
            Return Me.IsNull(Me.tableApparats.d_hotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setd_hotNull()
            Me(Me.tableApparats.d_hotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isd_coldNull() As Boolean
            Return Me.IsNull(Me.tableApparats.d_coldColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setd_coldNull()
            Me(Me.tableApparats.d_coldColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTypeNull() As Boolean
            Return Me.IsNull(Me.tableApparats.TypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTypeNull()
            Me(Me.tableApparats.TypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsS1_AngleNull() As Boolean
            Return Me.IsNull(Me.tableApparats.S1_AngleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetS1_AngleNull()
            Me(Me.tableApparats.S1_AngleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsS2_AngleNull() As Boolean
            Return Me.IsNull(Me.tableApparats.S2_AngleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetS2_AngleNull()
            Me(Me.tableApparats.S2_AngleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsS3_AngleNull() As Boolean
            Return Me.IsNull(Me.tableApparats.S3_AngleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetS3_AngleNull()
            Me(Me.tableApparats.S3_AngleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsS4_AngleNull() As Boolean
            Return Me.IsNull(Me.tableApparats.S4_AngleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetS4_AngleNull()
            Me(Me.tableApparats.S4_AngleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsProkachkaAngleNull() As Boolean
            Return Me.IsNull(Me.tableApparats.ProkachkaAngleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetProkachkaAngleNull()
            Me(Me.tableApparats.ProkachkaAngleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCheck_ProkachkaNull() As Boolean
            Return Me.IsNull(Me.tableApparats.Check_ProkachkaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCheck_ProkachkaNull()
            Me(Me.tableApparats.Check_ProkachkaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsS1_Speed1Null() As Boolean
            Return Me.IsNull(Me.tableApparats.S1_Speed1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetS1_Speed1Null()
            Me(Me.tableApparats.S1_Speed1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsS2_Speed2Null() As Boolean
            Return Me.IsNull(Me.tableApparats.S2_Speed2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetS2_Speed2Null()
            Me(Me.tableApparats.S2_Speed2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsS3_Speed3Null() As Boolean
            Return Me.IsNull(Me.tableApparats.S3_Speed3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetS3_Speed3Null()
            Me(Me.tableApparats.S3_Speed3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsS4_Speed4Null() As Boolean
            Return Me.IsNull(Me.tableApparats.S4_Speed4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetS4_Speed4Null()
            Me(Me.tableApparats.S4_Speed4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDP_inc_s1Null() As Boolean
            Return Me.IsNull(Me.tableApparats.DP_inc_s1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDP_inc_s1Null()
            Me(Me.tableApparats.DP_inc_s1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDP_inc_s2Null() As Boolean
            Return Me.IsNull(Me.tableApparats.DP_inc_s2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDP_inc_s2Null()
            Me(Me.tableApparats.DP_inc_s2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDP_inc_s3Null() As Boolean
            Return Me.IsNull(Me.tableApparats.DP_inc_s3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDP_inc_s3Null()
            Me(Me.tableApparats.DP_inc_s3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDP_inc_s4Null() As Boolean
            Return Me.IsNull(Me.tableApparats.DP_inc_s4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDP_inc_s4Null()
            Me(Me.tableApparats.DP_inc_s4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDP_dec_s1Null() As Boolean
            Return Me.IsNull(Me.tableApparats.DP_dec_s1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDP_dec_s1Null()
            Me(Me.tableApparats.DP_dec_s1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDP_dec_s2Null() As Boolean
            Return Me.IsNull(Me.tableApparats.DP_dec_s2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDP_dec_s2Null()
            Me(Me.tableApparats.DP_dec_s2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDP_dec_s3Null() As Boolean
            Return Me.IsNull(Me.tableApparats.DP_dec_s3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDP_dec_s3Null()
            Me(Me.tableApparats.DP_dec_s3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDP_dec_s4Null() As Boolean
            Return Me.IsNull(Me.tableApparats.DP_dec_s4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDP_dec_s4Null()
            Me(Me.tableApparats.DP_dec_s4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDE_s1Null() As Boolean
            Return Me.IsNull(Me.tableApparats.DE_s1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDE_s1Null()
            Me(Me.tableApparats.DE_s1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDE_s2Null() As Boolean
            Return Me.IsNull(Me.tableApparats.DE_s2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDE_s2Null()
            Me(Me.tableApparats.DE_s2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDE_s3Null() As Boolean
            Return Me.IsNull(Me.tableApparats.DE_s3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDE_s3Null()
            Me(Me.tableApparats.DE_s3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDE_s4Null() As Boolean
            Return Me.IsNull(Me.tableApparats.DE_s4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDE_s4Null()
            Me(Me.tableApparats.DE_s4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsReg_s1Null() As Boolean
            Return Me.IsNull(Me.tableApparats.Reg_s1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetReg_s1Null()
            Me(Me.tableApparats.Reg_s1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsReg_s2Null() As Boolean
            Return Me.IsNull(Me.tableApparats.Reg_s2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetReg_s2Null()
            Me(Me.tableApparats.Reg_s2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsReg_s3Null() As Boolean
            Return Me.IsNull(Me.tableApparats.Reg_s3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetReg_s3Null()
            Me(Me.tableApparats.Reg_s3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsReg_s4Null() As Boolean
            Return Me.IsNull(Me.tableApparats.Reg_s4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetReg_s4Null()
            Me(Me.tableApparats.Reg_s4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBreg_s1Null() As Boolean
            Return Me.IsNull(Me.tableApparats.Breg_s1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBreg_s1Null()
            Me(Me.tableApparats.Breg_s1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBreg_s2Null() As Boolean
            Return Me.IsNull(Me.tableApparats.Breg_s2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBreg_s2Null()
            Me(Me.tableApparats.Breg_s2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBreg_s3Null() As Boolean
            Return Me.IsNull(Me.tableApparats.Breg_s3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBreg_s3Null()
            Me(Me.tableApparats.Breg_s3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBreg_s4Null() As Boolean
            Return Me.IsNull(Me.tableApparats.Breg_s4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBreg_s4Null()
            Me(Me.tableApparats.Breg_s4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEreg_s1Null() As Boolean
            Return Me.IsNull(Me.tableApparats.Ereg_s1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEreg_s1Null()
            Me(Me.tableApparats.Ereg_s1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEreg_s2Null() As Boolean
            Return Me.IsNull(Me.tableApparats.Ereg_s2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEreg_s2Null()
            Me(Me.tableApparats.Ereg_s2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEreg_s3Null() As Boolean
            Return Me.IsNull(Me.tableApparats.Ereg_s3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEreg_s3Null()
            Me(Me.tableApparats.Ereg_s3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEreg_s4Null() As Boolean
            Return Me.IsNull(Me.tableApparats.Ereg_s4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEreg_s4Null()
            Me(Me.tableApparats.Ereg_s4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSreg_s1Null() As Boolean
            Return Me.IsNull(Me.tableApparats.Sreg_s1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSreg_s1Null()
            Me(Me.tableApparats.Sreg_s1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSreg_s2Null() As Boolean
            Return Me.IsNull(Me.tableApparats.Sreg_s2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSreg_s2Null()
            Me(Me.tableApparats.Sreg_s2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSreg_s3Null() As Boolean
            Return Me.IsNull(Me.tableApparats.Sreg_s3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSreg_s3Null()
            Me(Me.tableApparats.Sreg_s3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSreg_s4Null() As Boolean
            Return Me.IsNull(Me.tableApparats.Sreg_s4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSreg_s4Null()
            Me(Me.tableApparats.Sreg_s4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetmainRows() As mainRow()
            If (Me.Table.ChildRelations("Apparats_main") Is Nothing) Then
                Return New mainRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Apparats_main")),mainRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class mainRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As mainRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As mainRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As mainRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class AppointmentRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As AppointmentRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As AppointmentRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As AppointmentRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class OperatorsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OperatorsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As OperatorsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As OperatorsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class RemontRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RemontRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As RemontRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As RemontRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class ApparatTypeRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ApparatTypeRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As ApparatTypeRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As ApparatTypeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class RezultRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RezultRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As RezultRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As RezultRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class ApparatsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ApparatsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As ApparatsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As ApparatsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace GidrogasitelDataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class mainTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlServerCe.SqlCeDataAdapter
        
        Private _connection As Global.System.Data.SqlServerCe.SqlCeConnection
        
        Private _transaction As Global.System.Data.SqlServerCe.SqlCeTransaction
        
        Private _commandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlServerCe.SqlCeDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlServerCe.SqlCeConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlServerCe.SqlCeCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlServerCe.SqlCeTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlServerCe.SqlCeDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "main"
            tableMapping.ColumnMappings.Add("Type", "Type")
            tableMapping.ColumnMappings.Add("Num", "Num")
            tableMapping.ColumnMappings.Add("_DateTime", "_DateTime")
            tableMapping.ColumnMappings.Add("Remont", "Remont")
            tableMapping.ColumnMappings.Add("Appointment", "Appointment")
            tableMapping.ColumnMappings.Add("Operator", "Operator")
            tableMapping.ColumnMappings.Add("Rezult1", "Rezult1")
            tableMapping.ColumnMappings.Add("Rezult2", "Rezult2")
            tableMapping.ColumnMappings.Add("Rezult3", "Rezult3")
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("Rezult4", "Rezult4")
            tableMapping.ColumnMappings.Add("Text", "Text")
            tableMapping.ColumnMappings.Add("IsDel", "IsDel")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlServerCe.SqlCeCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [main] WHERE (([ID] = @p1))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p1", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.SqlServerCe.SqlCeCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [main] ([Type], [Num], [_DateTime], [Remont], [Appointment], [Operato"& _ 
                "r], [Rezult1], [Rezult2], [Rezult3], [Rezult4], [Text], [IsDel]) VALUES (@p1, @p"& _ 
                "2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11, @p12)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p1", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Type", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Num", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p3", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "_DateTime", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p4", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Remont", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p5", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Appointment", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p6", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Operator", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p7", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Rezult1", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p8", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Rezult2", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p9", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Rezult3", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p10", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Rezult4", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p11", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Text", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p12", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "IsDel", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlServerCe.SqlCeCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [main] SET [Type] = @p1, [Num] = @p2, [_DateTime] = @p3, [Remont] = @p4, ["& _ 
                "Appointment] = @p5, [Operator] = @p6, [Rezult1] = @p7, [Rezult2] = @p8, [Rezult3"& _ 
                "] = @p9, [Rezult4] = @p10, [Text] = @p11, [IsDel] = @p12 WHERE (([ID] = @p13))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p1", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Type", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Num", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p3", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "_DateTime", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p4", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Remont", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p5", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Appointment", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p6", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Operator", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p7", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Rezult1", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p8", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Rezult2", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p9", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Rezult3", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p10", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Rezult4", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p11", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Text", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p12", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "IsDel", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p13", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlServerCe.SqlCeConnection()
            Me._connection.ConnectionString = Global.Gidrogasitel.My.MySettings.Default.GidrogasitelConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlServerCe.SqlCeCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SqlServerCe.SqlCeCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        Type, Num, _DateTime, Remont, Appointment, Operator, Rezult1, Rezul"& _ 
                "t2, Rezult3, ID, Rezult4, Text, IsDel"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            main"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY ID DESC"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlServerCe.SqlCeCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        Appointment, ID, IsDel, Num, Operator, Remont, Rezult1, Rezult2, Re"& _ 
                "zult3, Rezult4, Text, Type, _DateTime"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            main"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (Type "& _ 
                ">= @Type1) AND (Type <= @Type2) AND (Num LIKE @Num) AND (_DateTime >= @Date1) AN"& _ 
                "D (_DateTime <= @Date2) AND (Remont >= @Remont1) AND (Remont <= @Remont2) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "                         (Operator >= @Operator1) AND (Operator <= @Operator2) A"& _ 
                "ND (IsDel = 0 OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         IsDel IS NULL) AND (NOT (Text IS NULL"& _ 
                "))"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY _DateTime DESC"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@Type1", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Type", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@Type2", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Type", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@Num", Global.System.Data.SqlDbType.NVarChar, 15, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Num", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@Date1", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, true, 0, 0, "_DateTime", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@Date2", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, true, 0, 0, "_DateTime", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@Remont1", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Remont", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@Remont2", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Remont", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@Operator1", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Operator", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@Operator2", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Operator", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._commandCollection(2) = New Global.System.Data.SqlServerCe.SqlCeCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT        Type, Num, _DateTime, Remont, Appointment, Operator, Rezult1, Rezul"& _ 
                "t2, Rezult3, ID, Rezult4, Text, IsDel"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            main"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (NOT ("& _ 
                "Text IS NULL)) AND (IsDel = 0 OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         IsDel IS NULL)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER"& _ 
                " BY ID DESC"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As GidrogasitelDataSet.mainDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As GidrogasitelDataSet.mainDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As GidrogasitelDataSet.mainDataTable = New GidrogasitelDataSet.mainDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As GidrogasitelDataSet.mainDataTable, ByVal Type1 As Global.System.Nullable(Of Long), ByVal Type2 As Global.System.Nullable(Of Long), ByVal Num As String, ByVal Date1 As Global.System.Nullable(Of Date), ByVal Date2 As Global.System.Nullable(Of Date), ByVal Remont1 As Global.System.Nullable(Of Long), ByVal Remont2 As Global.System.Nullable(Of Long), ByVal Operator1 As Global.System.Nullable(Of Long), ByVal Operator2 As Global.System.Nullable(Of Long)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Type1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Type1.Value,Long)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Type2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Type2.Value,Long)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Num Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Num,String)
            End If
            If (Date1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(Date1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Date2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(Date2.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Remont1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(Remont1.Value,Long)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Remont2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(Remont2.Value,Long)
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Operator1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(Operator1.Value,Long)
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Operator2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(Operator2.Value,Long)
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBy(ByVal Type1 As Global.System.Nullable(Of Long), ByVal Type2 As Global.System.Nullable(Of Long), ByVal Num As String, ByVal Date1 As Global.System.Nullable(Of Date), ByVal Date2 As Global.System.Nullable(Of Date), ByVal Remont1 As Global.System.Nullable(Of Long), ByVal Remont2 As Global.System.Nullable(Of Long), ByVal Operator1 As Global.System.Nullable(Of Long), ByVal Operator2 As Global.System.Nullable(Of Long)) As GidrogasitelDataSet.mainDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Type1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Type1.Value,Long)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Type2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Type2.Value,Long)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Num Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Num,String)
            End If
            If (Date1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(Date1.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Date2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(Date2.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Remont1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(Remont1.Value,Long)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Remont2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(Remont2.Value,Long)
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Operator1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(Operator1.Value,Long)
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Operator2.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(Operator2.Value,Long)
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As GidrogasitelDataSet.mainDataTable = New GidrogasitelDataSet.mainDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy1(ByVal dataTable As GidrogasitelDataSet.mainDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBy1() As GidrogasitelDataSet.mainDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Dim dataTable As GidrogasitelDataSet.mainDataTable = New GidrogasitelDataSet.mainDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As GidrogasitelDataSet.mainDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As GidrogasitelDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "main")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class AppointmentTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlServerCe.SqlCeDataAdapter
        
        Private _connection As Global.System.Data.SqlServerCe.SqlCeConnection
        
        Private _transaction As Global.System.Data.SqlServerCe.SqlCeTransaction
        
        Private _commandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlServerCe.SqlCeDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlServerCe.SqlCeConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlServerCe.SqlCeCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlServerCe.SqlCeTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlServerCe.SqlCeDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Appointment"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("Appointment", "Appointment")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlServerCe.SqlCeCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Appointment] WHERE (([ID] = @p1))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p1", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.SqlServerCe.SqlCeCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Appointment] ([Appointment]) VALUES (@p1)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Appointment", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlServerCe.SqlCeCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Appointment] SET [Appointment] = @p1 WHERE (([ID] = @p2))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Appointment", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p2", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlServerCe.SqlCeConnection()
            Me._connection.ConnectionString = Global.Gidrogasitel.My.MySettings.Default.GidrogasitelConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlServerCe.SqlCeCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlServerCe.SqlCeCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [ID], [Appointment] FROM [Appointment]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As GidrogasitelDataSet.AppointmentDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As GidrogasitelDataSet.AppointmentDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As GidrogasitelDataSet.AppointmentDataTable = New GidrogasitelDataSet.AppointmentDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As GidrogasitelDataSet.AppointmentDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As GidrogasitelDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Appointment")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal p1 As Long) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(p1,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal p1 As String) As Integer
            If (p1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal p1 As String, ByVal p2 As Long) As Integer
            If (p1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(p1,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p2,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class OperatorsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlServerCe.SqlCeDataAdapter
        
        Private _connection As Global.System.Data.SqlServerCe.SqlCeConnection
        
        Private _transaction As Global.System.Data.SqlServerCe.SqlCeTransaction
        
        Private _commandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlServerCe.SqlCeDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlServerCe.SqlCeConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlServerCe.SqlCeCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlServerCe.SqlCeTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlServerCe.SqlCeDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Operators"
            tableMapping.ColumnMappings.Add("First", "First")
            tableMapping.ColumnMappings.Add("Second", "Second")
            tableMapping.ColumnMappings.Add("Last", "Last")
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("Appointment", "Appointment")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlServerCe.SqlCeCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Operators] WHERE (([ID] = @p1))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p1", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.SqlServerCe.SqlCeCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Operators] ([First], [Second], [Last], [Appointment]) VALUES (@p1, @"& _ 
                "p2, @p3, @p4)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "First", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Second", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Last", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p4", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Appointment", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlServerCe.SqlCeCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Operators] SET [First] = @p1, [Second] = @p2, [Last] = @p3, [Appointment]"& _ 
                " = @p4 WHERE (([ID] = @p5))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "First", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Second", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p3", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Last", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p4", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Appointment", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p5", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlServerCe.SqlCeConnection()
            Me._connection.ConnectionString = Global.Gidrogasitel.My.MySettings.Default.GidrogasitelConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlServerCe.SqlCeCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlServerCe.SqlCeCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        First, Second, Last, ID, Appointment"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Operators"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As GidrogasitelDataSet.OperatorsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As GidrogasitelDataSet.OperatorsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As GidrogasitelDataSet.OperatorsDataTable = New GidrogasitelDataSet.OperatorsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As GidrogasitelDataSet.OperatorsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As GidrogasitelDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Operators")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal p1 As Long) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(p1,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal p1 As String, ByVal p2 As String, ByVal p3 As String, ByVal p4 As Global.System.Nullable(Of Long)) As Integer
            If (p1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(p4.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal p1 As String, ByVal p2 As String, ByVal p3 As String, ByVal p4 As Global.System.Nullable(Of Long), ByVal p5 As Long) As Integer
            If (p1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(p4.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(p5,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class RemontTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlServerCe.SqlCeDataAdapter
        
        Private _connection As Global.System.Data.SqlServerCe.SqlCeConnection
        
        Private _transaction As Global.System.Data.SqlServerCe.SqlCeTransaction
        
        Private _commandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlServerCe.SqlCeDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlServerCe.SqlCeConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlServerCe.SqlCeCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlServerCe.SqlCeTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlServerCe.SqlCeDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Remont"
            tableMapping.ColumnMappings.Add("Remont", "Remont")
            tableMapping.ColumnMappings.Add("ID", "ID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlServerCe.SqlCeCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Remont] WHERE (([ID] = @p1))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p1", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.SqlServerCe.SqlCeCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Remont] ([Remont]) VALUES (@p1)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Remont", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlServerCe.SqlCeCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Remont] SET [Remont] = @p1 WHERE (([ID] = @p2))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Remont", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p2", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlServerCe.SqlCeConnection()
            Me._connection.ConnectionString = Global.Gidrogasitel.My.MySettings.Default.GidrogasitelConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlServerCe.SqlCeCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlServerCe.SqlCeCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [Remont], [ID] FROM [Remont]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As GidrogasitelDataSet.RemontDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As GidrogasitelDataSet.RemontDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As GidrogasitelDataSet.RemontDataTable = New GidrogasitelDataSet.RemontDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As GidrogasitelDataSet.RemontDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As GidrogasitelDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Remont")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal p1 As Long) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(p1,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal p1 As String) As Integer
            If (p1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal p1 As String, ByVal p2 As Long) As Integer
            If (p1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(p1,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p2,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ApparatTypeTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlServerCe.SqlCeDataAdapter
        
        Private _connection As Global.System.Data.SqlServerCe.SqlCeConnection
        
        Private _transaction As Global.System.Data.SqlServerCe.SqlCeTransaction
        
        Private _commandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlServerCe.SqlCeDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlServerCe.SqlCeConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlServerCe.SqlCeCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlServerCe.SqlCeTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlServerCe.SqlCeDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ApparatType"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("Name", "Name")
            tableMapping.ColumnMappings.Add("Count", "Count")
            tableMapping.ColumnMappings.Add("S1", "S1")
            tableMapping.ColumnMappings.Add("S2", "S2")
            tableMapping.ColumnMappings.Add("S3", "S3")
            tableMapping.ColumnMappings.Add("S4", "S4")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlServerCe.SqlCeCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [ApparatType] WHERE (([ID] = @p1))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p1", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.SqlServerCe.SqlCeCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [ApparatType] ([Name], [Count], [S1], [S2], [S3], [S4]) VALUES (@p1, "& _ 
                "@p2, @p3, @p4, @p5, @p6)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Name", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Count", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p3", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "S1", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p4", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "S2", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p5", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "S3", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p6", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "S4", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlServerCe.SqlCeCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [ApparatType] SET [Name] = @p1, [Count] = @p2, [S1] = @p3, [S2] = @p4, [S3"& _ 
                "] = @p5, [S4] = @p6 WHERE (([ID] = @p7))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Name", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Count", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p3", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "S1", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p4", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "S2", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p5", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "S3", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p6", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "S4", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p7", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlServerCe.SqlCeConnection()
            Me._connection.ConnectionString = Global.Gidrogasitel.My.MySettings.Default.GidrogasitelConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlServerCe.SqlCeCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlServerCe.SqlCeCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [ID], [Name], [Count], [S1], [S2], [S3], [S4] FROM [ApparatType]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As GidrogasitelDataSet.ApparatTypeDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As GidrogasitelDataSet.ApparatTypeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As GidrogasitelDataSet.ApparatTypeDataTable = New GidrogasitelDataSet.ApparatTypeDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As GidrogasitelDataSet.ApparatTypeDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As GidrogasitelDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "ApparatType")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal p1 As Long) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(p1,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal p1 As String, ByVal p2 As Global.System.Nullable(Of Integer), ByVal p3 As Global.System.Nullable(Of Single), ByVal p4 As Global.System.Nullable(Of Single), ByVal p5 As Global.System.Nullable(Of Single), ByVal p6 As Global.System.Nullable(Of Single)) As Integer
            If (p1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(p2.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (p3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(p3.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (p4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(p4.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (p5.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(p5.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (p6.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(p6.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal p1 As String, ByVal p2 As Global.System.Nullable(Of Integer), ByVal p3 As Global.System.Nullable(Of Single), ByVal p4 As Global.System.Nullable(Of Single), ByVal p5 As Global.System.Nullable(Of Single), ByVal p6 As Global.System.Nullable(Of Single), ByVal p7 As Long) As Integer
            If (p1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p2.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (p3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(p3.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (p4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(p4.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (p5.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(p5.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (p6.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(p6.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(p7,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class RezultTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlServerCe.SqlCeDataAdapter
        
        Private _connection As Global.System.Data.SqlServerCe.SqlCeConnection
        
        Private _transaction As Global.System.Data.SqlServerCe.SqlCeTransaction
        
        Private _commandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlServerCe.SqlCeDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlServerCe.SqlCeConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlServerCe.SqlCeCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlServerCe.SqlCeTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlServerCe.SqlCeDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Rezult"
            tableMapping.ColumnMappings.Add("Speed", "Speed")
            tableMapping.ColumnMappings.Add("P_inc", "P_inc")
            tableMapping.ColumnMappings.Add("P_dec", "P_dec")
            tableMapping.ColumnMappings.Add("B_inc", "B_inc")
            tableMapping.ColumnMappings.Add("B_dec", "B_dec")
            tableMapping.ColumnMappings.Add("E", "E")
            tableMapping.ColumnMappings.Add("Symmetry", "Symmetry")
            tableMapping.ColumnMappings.Add("Values", "Values")
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("Values2", "Values2")
            tableMapping.ColumnMappings.Add("A", "A")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlServerCe.SqlCeCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Rezult] WHERE (([ID] = @p1))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p1", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.SqlServerCe.SqlCeCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Rezult] ([Speed], [P_inc], [P_dec], [B_inc], [B_dec], [E], [Symmetry"& _ 
                "], [Values], [Values2], [A]) VALUES (@p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9"& _ 
                ", @p10)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p1", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Speed", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p2", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "P_inc", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p3", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "P_dec", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p4", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "B_inc", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p5", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "B_dec", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p6", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "E", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p7", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Symmetry", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p8", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Values", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p9", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Values2", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p10", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "A", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlServerCe.SqlCeCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Rezult] SET [Speed] = @p1, [P_inc] = @p2, [P_dec] = @p3, [B_inc] = @p4, ["& _ 
                "B_dec] = @p5, [E] = @p6, [Symmetry] = @p7, [Values] = @p8, [Values2] = @p9, [A] "& _ 
                "= @p10 WHERE (([ID] = @p11))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p1", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Speed", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p2", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "P_inc", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p3", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "P_dec", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p4", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "B_inc", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p5", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "B_dec", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p6", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "E", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p7", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Symmetry", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p8", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Values", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p9", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Values2", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p10", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "A", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p11", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlServerCe.SqlCeConnection()
            Me._connection.ConnectionString = Global.Gidrogasitel.My.MySettings.Default.GidrogasitelConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlServerCe.SqlCeCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlServerCe.SqlCeCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Speed, P_inc, P_dec, B_inc, B_dec, E, Symmetry, [Values], ID, Values2, A F"& _ 
                "ROM Rezult"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As GidrogasitelDataSet.RezultDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As GidrogasitelDataSet.RezultDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As GidrogasitelDataSet.RezultDataTable = New GidrogasitelDataSet.RezultDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As GidrogasitelDataSet.RezultDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As GidrogasitelDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Rezult")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal p1 As Long) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(p1,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal p1 As Global.System.Nullable(Of Single), ByVal p2 As Global.System.Nullable(Of Single), ByVal p3 As Global.System.Nullable(Of Single), ByVal p4 As Global.System.Nullable(Of Single), ByVal p5 As Global.System.Nullable(Of Single), ByVal p6 As Global.System.Nullable(Of Single), ByVal p7 As Global.System.Nullable(Of Single), ByVal p8 As String, ByVal p9 As String, ByVal p10 As Global.System.Nullable(Of Single)) As Integer
            If (p1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (p2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(p2.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (p3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(p3.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (p4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(p4.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (p5.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(p5.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (p6.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(p6.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (p7.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(p7.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (p8 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(p8,String)
            End If
            If (p9 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(p9,String)
            End If
            If (p10.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(p10.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal p1 As Global.System.Nullable(Of Single), ByVal p2 As Global.System.Nullable(Of Single), ByVal p3 As Global.System.Nullable(Of Single), ByVal p4 As Global.System.Nullable(Of Single), ByVal p5 As Global.System.Nullable(Of Single), ByVal p6 As Global.System.Nullable(Of Single), ByVal p7 As Global.System.Nullable(Of Single), ByVal p8 As String, ByVal p9 As String, ByVal p10 As Global.System.Nullable(Of Single), ByVal p11 As Long) As Integer
            If (p1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(p1.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (p2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p2.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (p3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(p3.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (p4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(p4.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (p5.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(p5.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (p6.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(p6.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (p7.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(p7.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (p8 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(p8,String)
            End If
            If (p9 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(p9,String)
            End If
            If (p10.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(p10.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(p11,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ApparatsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlServerCe.SqlCeDataAdapter
        
        Private _connection As Global.System.Data.SqlServerCe.SqlCeConnection
        
        Private _transaction As Global.System.Data.SqlServerCe.SqlCeTransaction
        
        Private _commandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlServerCe.SqlCeDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlServerCe.SqlCeConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlServerCe.SqlCeCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlServerCe.SqlCeTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlServerCe.SqlCeCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlServerCe.SqlCeDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Apparats"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("Name", "Name")
            tableMapping.ColumnMappings.Add("P_inc_s1", "P_inc_s1")
            tableMapping.ColumnMappings.Add("P_dec_s1", "P_dec_s1")
            tableMapping.ColumnMappings.Add("B_inc_s1", "B_inc_s1")
            tableMapping.ColumnMappings.Add("B_dec_s1", "B_dec_s1")
            tableMapping.ColumnMappings.Add("E_s1", "E_s1")
            tableMapping.ColumnMappings.Add("Symmetry_s1", "Symmetry_s1")
            tableMapping.ColumnMappings.Add("P_inc_s2", "P_inc_s2")
            tableMapping.ColumnMappings.Add("P_dec_s2", "P_dec_s2")
            tableMapping.ColumnMappings.Add("B_inc_s2", "B_inc_s2")
            tableMapping.ColumnMappings.Add("B_dec_s2", "B_dec_s2")
            tableMapping.ColumnMappings.Add("E_s2", "E_s2")
            tableMapping.ColumnMappings.Add("Symmetry_s2", "Symmetry_s2")
            tableMapping.ColumnMappings.Add("P_inc_s3", "P_inc_s3")
            tableMapping.ColumnMappings.Add("P_dec_s3", "P_dec_s3")
            tableMapping.ColumnMappings.Add("B_inc_s3", "B_inc_s3")
            tableMapping.ColumnMappings.Add("B_dec_s3", "B_dec_s3")
            tableMapping.ColumnMappings.Add("E_s3", "E_s3")
            tableMapping.ColumnMappings.Add("Symmetry_s3", "Symmetry_s3")
            tableMapping.ColumnMappings.Add("P_inc_s4", "P_inc_s4")
            tableMapping.ColumnMappings.Add("P_dec_s4", "P_dec_s4")
            tableMapping.ColumnMappings.Add("B_inc_s4", "B_inc_s4")
            tableMapping.ColumnMappings.Add("B_dec_s4", "B_dec_s4")
            tableMapping.ColumnMappings.Add("E_s4", "E_s4")
            tableMapping.ColumnMappings.Add("Symmetry_s4", "Symmetry_s4")
            tableMapping.ColumnMappings.Add("Check_s1", "Check_s1")
            tableMapping.ColumnMappings.Add("Check_s2", "Check_s2")
            tableMapping.ColumnMappings.Add("Check_s3", "Check_s3")
            tableMapping.ColumnMappings.Add("Check_s4", "Check_s4")
            tableMapping.ColumnMappings.Add("ProkachkaTime", "ProkachkaTime")
            tableMapping.ColumnMappings.Add("ProkackaAmpl", "ProkackaAmpl")
            tableMapping.ColumnMappings.Add("ProkachkaSpeed", "ProkachkaSpeed")
            tableMapping.ColumnMappings.Add("ProkachkaMotorSpeed", "ProkachkaMotorSpeed")
            tableMapping.ColumnMappings.Add("ProkachkaMotorSpeedMax", "ProkachkaMotorSpeedMax")
            tableMapping.ColumnMappings.Add("S1_Time", "S1_Time")
            tableMapping.ColumnMappings.Add("S1_Ampl", "S1_Ampl")
            tableMapping.ColumnMappings.Add("S1_MotorSpeed", "S1_MotorSpeed")
            tableMapping.ColumnMappings.Add("S1_MotorSpeedMax", "S1_MotorSpeedMax")
            tableMapping.ColumnMappings.Add("S2_Time", "S2_Time")
            tableMapping.ColumnMappings.Add("S2_Ampl", "S2_Ampl")
            tableMapping.ColumnMappings.Add("S2_MotorSpeed", "S2_MotorSpeed")
            tableMapping.ColumnMappings.Add("S2_MotorSpeedMax", "S2_MotorSpeedMax")
            tableMapping.ColumnMappings.Add("S3_Time", "S3_Time")
            tableMapping.ColumnMappings.Add("S3_Ampl", "S3_Ampl")
            tableMapping.ColumnMappings.Add("S3_MotorSpeed", "S3_MotorSpeed")
            tableMapping.ColumnMappings.Add("S3_MotorSpeedMax", "S3_MotorSpeedMax")
            tableMapping.ColumnMappings.Add("S4_Time", "S4_Time")
            tableMapping.ColumnMappings.Add("S4_Ampl", "S4_Ampl")
            tableMapping.ColumnMappings.Add("S4_MotorSpeed", "S4_MotorSpeed")
            tableMapping.ColumnMappings.Add("S4_MotorSpeedMax", "S4_MotorSpeedMax")
            tableMapping.ColumnMappings.Add("d_nom", "d_nom")
            tableMapping.ColumnMappings.Add("d_hot", "d_hot")
            tableMapping.ColumnMappings.Add("d_cold", "d_cold")
            tableMapping.ColumnMappings.Add("Type", "Type")
            tableMapping.ColumnMappings.Add("S1_Angle", "S1_Angle")
            tableMapping.ColumnMappings.Add("S2_Angle", "S2_Angle")
            tableMapping.ColumnMappings.Add("S3_Angle", "S3_Angle")
            tableMapping.ColumnMappings.Add("S4_Angle", "S4_Angle")
            tableMapping.ColumnMappings.Add("ProkachkaAngle", "ProkachkaAngle")
            tableMapping.ColumnMappings.Add("Check_Prokachka", "Check_Prokachka")
            tableMapping.ColumnMappings.Add("S1_Speed1", "S1_Speed1")
            tableMapping.ColumnMappings.Add("S2_Speed2", "S2_Speed2")
            tableMapping.ColumnMappings.Add("S3_Speed3", "S3_Speed3")
            tableMapping.ColumnMappings.Add("S4_Speed4", "S4_Speed4")
            tableMapping.ColumnMappings.Add("DP_inc_s1", "DP_inc_s1")
            tableMapping.ColumnMappings.Add("DP_inc_s2", "DP_inc_s2")
            tableMapping.ColumnMappings.Add("DP_inc_s3", "DP_inc_s3")
            tableMapping.ColumnMappings.Add("DP_inc_s4", "DP_inc_s4")
            tableMapping.ColumnMappings.Add("DP_dec_s1", "DP_dec_s1")
            tableMapping.ColumnMappings.Add("DP_dec_s2", "DP_dec_s2")
            tableMapping.ColumnMappings.Add("DP_dec_s3", "DP_dec_s3")
            tableMapping.ColumnMappings.Add("DP_dec_s4", "DP_dec_s4")
            tableMapping.ColumnMappings.Add("DE_s1", "DE_s1")
            tableMapping.ColumnMappings.Add("DE_s2", "DE_s2")
            tableMapping.ColumnMappings.Add("DE_s3", "DE_s3")
            tableMapping.ColumnMappings.Add("DE_s4", "DE_s4")
            tableMapping.ColumnMappings.Add("Reg_s1", "Reg_s1")
            tableMapping.ColumnMappings.Add("Reg_s2", "Reg_s2")
            tableMapping.ColumnMappings.Add("Reg_s3", "Reg_s3")
            tableMapping.ColumnMappings.Add("Reg_s4", "Reg_s4")
            tableMapping.ColumnMappings.Add("Breg_s1", "Breg_s1")
            tableMapping.ColumnMappings.Add("Breg_s2", "Breg_s2")
            tableMapping.ColumnMappings.Add("Breg_s3", "Breg_s3")
            tableMapping.ColumnMappings.Add("Breg_s4", "Breg_s4")
            tableMapping.ColumnMappings.Add("Ereg_s1", "Ereg_s1")
            tableMapping.ColumnMappings.Add("Ereg_s2", "Ereg_s2")
            tableMapping.ColumnMappings.Add("Ereg_s3", "Ereg_s3")
            tableMapping.ColumnMappings.Add("Ereg_s4", "Ereg_s4")
            tableMapping.ColumnMappings.Add("Sreg_s1", "Sreg_s1")
            tableMapping.ColumnMappings.Add("Sreg_s2", "Sreg_s2")
            tableMapping.ColumnMappings.Add("Sreg_s3", "Sreg_s3")
            tableMapping.ColumnMappings.Add("Sreg_s4", "Sreg_s4")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlServerCe.SqlCeCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Apparats] WHERE (([ID] = @p1))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p1", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.SqlServerCe.SqlCeCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Apparats] ([Name], [P_inc_s1], [P_dec_s1], [B_inc_s1], [B_dec_s1], ["& _ 
                "E_s1], [Symmetry_s1], [P_inc_s2], [P_dec_s2], [B_inc_s2], [B_dec_s2], [E_s2], [S"& _ 
                "ymmetry_s2], [P_inc_s3], [P_dec_s3], [B_inc_s3], [B_dec_s3], [E_s3], [Symmetry_s"& _ 
                "3], [P_inc_s4], [P_dec_s4], [B_inc_s4], [B_dec_s4], [E_s4], [Symmetry_s4], [Chec"& _ 
                "k_s1], [Check_s2], [Check_s3], [Check_s4], [ProkachkaTime], [ProkackaAmpl], [Pro"& _ 
                "kachkaSpeed], [ProkachkaMotorSpeed], [ProkachkaMotorSpeedMax], [S1_Time], [S1_Am"& _ 
                "pl], [S1_MotorSpeed], [S1_MotorSpeedMax], [S2_Time], [S2_Ampl], [S2_MotorSpeed],"& _ 
                " [S2_MotorSpeedMax], [S3_Time], [S3_Ampl], [S3_MotorSpeed], [S3_MotorSpeedMax], "& _ 
                "[S4_Time], [S4_Ampl], [S4_MotorSpeed], [S4_MotorSpeedMax], [d_nom], [d_hot], [d_"& _ 
                "cold], [Type], [S1_Angle], [S2_Angle], [S3_Angle], [S4_Angle], [ProkachkaAngle],"& _ 
                " [Check_Prokachka], [S1_Speed1], [S2_Speed2], [S3_Speed3], [S4_Speed4], [DP_inc_"& _ 
                "s1], [DP_inc_s2], [DP_inc_s3], [DP_inc_s4], [DP_dec_s1], [DP_dec_s2], [DP_dec_s3"& _ 
                "], [DP_dec_s4], [DE_s1], [DE_s2], [DE_s3], [DE_s4], [Reg_s1], [Reg_s2], [Reg_s3]"& _ 
                ", [Reg_s4], [Breg_s1], [Breg_s2], [Breg_s3], [Breg_s4], [Ereg_s1], [Ereg_s2], [E"& _ 
                "reg_s3], [Ereg_s4], [Sreg_s1], [Sreg_s2], [Sreg_s3], [Sreg_s4]) VALUES (@p1, @p2"& _ 
                ", @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11, @p12, @p13, @p14, @p15, @p16, @"& _ 
                "p17, @p18, @p19, @p20, @p21, @p22, @p23, @p24, @p25, @p26, @p27, @p28, @p29, @p3"& _ 
                "0, @p31, @p32, @p33, @p34, @p35, @p36, @p37, @p38, @p39, @p40, @p41, @p42, @p43,"& _ 
                " @p44, @p45, @p46, @p47, @p48, @p49, @p50, @p51, @p52, @p53, @p54, @p55, @p56, @"& _ 
                "p57, @p58, @p59, @p60, @p61, @p62, @p63, @p64, @p65, @p66, @p67, @p68, @p69, @p7"& _ 
                "0, @p71, @p72, @p73, @p74, @p75, @p76, @p77, @p78, @p79, @p80, @p81, @p82, @p83,"& _ 
                " @p84, @p85, @p86, @p87, @p88, @p89, @p90, @p91, @p92)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Name", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p2", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "P_inc_s1", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p3", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "P_dec_s1", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p4", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "B_inc_s1", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p5", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "B_dec_s1", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p6", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "E_s1", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p7", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Symmetry_s1", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p8", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "P_inc_s2", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p9", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "P_dec_s2", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p10", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "B_inc_s2", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p11", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "B_dec_s2", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p12", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "E_s2", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p13", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Symmetry_s2", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p14", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "P_inc_s3", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p15", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "P_dec_s3", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p16", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "B_inc_s3", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p17", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "B_dec_s3", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p18", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "E_s3", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p19", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Symmetry_s3", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p20", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "P_inc_s4", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p21", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "P_dec_s4", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p22", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "B_inc_s4", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p23", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "B_dec_s4", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p24", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "E_s4", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p25", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Symmetry_s4", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p26", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Check_s1", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p27", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Check_s2", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p28", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Check_s3", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p29", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Check_s4", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p30", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "ProkachkaTime", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p31", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "ProkackaAmpl", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p32", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "ProkachkaSpeed", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p33", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "ProkachkaMotorSpeed", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p34", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "ProkachkaMotorSpeedMax", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p35", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "S1_Time", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p36", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "S1_Ampl", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p37", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "S1_MotorSpeed", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p38", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "S1_MotorSpeedMax", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p39", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "S2_Time", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p40", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "S2_Ampl", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p41", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "S2_MotorSpeed", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p42", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "S2_MotorSpeedMax", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p43", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "S3_Time", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p44", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "S3_Ampl", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p45", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "S3_MotorSpeed", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p46", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "S3_MotorSpeedMax", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p47", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "S4_Time", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p48", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "S4_Ampl", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p49", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "S4_MotorSpeed", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p50", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "S4_MotorSpeedMax", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p51", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "d_nom", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p52", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "d_hot", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p53", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "d_cold", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p54", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Type", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p55", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "S1_Angle", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p56", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "S2_Angle", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p57", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "S3_Angle", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p58", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "S4_Angle", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p59", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "ProkachkaAngle", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p60", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Check_Prokachka", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p61", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "S1_Speed1", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p62", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "S2_Speed2", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p63", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "S3_Speed3", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p64", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "S4_Speed4", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p65", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "DP_inc_s1", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p66", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "DP_inc_s2", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p67", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "DP_inc_s3", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p68", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "DP_inc_s4", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p69", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "DP_dec_s1", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p70", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "DP_dec_s2", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p71", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "DP_dec_s3", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p72", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "DP_dec_s4", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p73", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "DE_s1", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p74", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "DE_s2", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p75", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "DE_s3", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p76", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "DE_s4", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p77", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Reg_s1", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p78", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Reg_s2", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p79", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Reg_s3", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p80", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Reg_s4", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p81", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Breg_s1", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p82", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Breg_s2", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p83", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Breg_s3", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p84", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Breg_s4", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p85", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Ereg_s1", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p86", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Ereg_s2", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p87", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Ereg_s3", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p88", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Ereg_s4", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p89", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Sreg_s1", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p90", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Sreg_s2", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p91", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Sreg_s3", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p92", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Sreg_s4", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlServerCe.SqlCeCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Apparats] SET [Name] = @p1, [P_inc_s1] = @p2, [P_dec_s1] = @p3, [B_inc_s1"& _ 
                "] = @p4, [B_dec_s1] = @p5, [E_s1] = @p6, [Symmetry_s1] = @p7, [P_inc_s2] = @p8, "& _ 
                "[P_dec_s2] = @p9, [B_inc_s2] = @p10, [B_dec_s2] = @p11, [E_s2] = @p12, [Symmetry"& _ 
                "_s2] = @p13, [P_inc_s3] = @p14, [P_dec_s3] = @p15, [B_inc_s3] = @p16, [B_dec_s3]"& _ 
                " = @p17, [E_s3] = @p18, [Symmetry_s3] = @p19, [P_inc_s4] = @p20, [P_dec_s4] = @p"& _ 
                "21, [B_inc_s4] = @p22, [B_dec_s4] = @p23, [E_s4] = @p24, [Symmetry_s4] = @p25, ["& _ 
                "Check_s1] = @p26, [Check_s2] = @p27, [Check_s3] = @p28, [Check_s4] = @p29, [Prok"& _ 
                "achkaTime] = @p30, [ProkackaAmpl] = @p31, [ProkachkaSpeed] = @p32, [ProkachkaMot"& _ 
                "orSpeed] = @p33, [ProkachkaMotorSpeedMax] = @p34, [S1_Time] = @p35, [S1_Ampl] = "& _ 
                "@p36, [S1_MotorSpeed] = @p37, [S1_MotorSpeedMax] = @p38, [S2_Time] = @p39, [S2_A"& _ 
                "mpl] = @p40, [S2_MotorSpeed] = @p41, [S2_MotorSpeedMax] = @p42, [S3_Time] = @p43"& _ 
                ", [S3_Ampl] = @p44, [S3_MotorSpeed] = @p45, [S3_MotorSpeedMax] = @p46, [S4_Time]"& _ 
                " = @p47, [S4_Ampl] = @p48, [S4_MotorSpeed] = @p49, [S4_MotorSpeedMax] = @p50, [d"& _ 
                "_nom] = @p51, [d_hot] = @p52, [d_cold] = @p53, [Type] = @p54, [S1_Angle] = @p55,"& _ 
                " [S2_Angle] = @p56, [S3_Angle] = @p57, [S4_Angle] = @p58, [ProkachkaAngle] = @p5"& _ 
                "9, [Check_Prokachka] = @p60, [S1_Speed1] = @p61, [S2_Speed2] = @p62, [S3_Speed3]"& _ 
                " = @p63, [S4_Speed4] = @p64, [DP_inc_s1] = @p65, [DP_inc_s2] = @p66, [DP_inc_s3]"& _ 
                " = @p67, [DP_inc_s4] = @p68, [DP_dec_s1] = @p69, [DP_dec_s2] = @p70, [DP_dec_s3]"& _ 
                " = @p71, [DP_dec_s4] = @p72, [DE_s1] = @p73, [DE_s2] = @p74, [DE_s3] = @p75, [DE"& _ 
                "_s4] = @p76, [Reg_s1] = @p77, [Reg_s2] = @p78, [Reg_s3] = @p79, [Reg_s4] = @p80,"& _ 
                " [Breg_s1] = @p81, [Breg_s2] = @p82, [Breg_s3] = @p83, [Breg_s4] = @p84, [Ereg_s"& _ 
                "1] = @p85, [Ereg_s2] = @p86, [Ereg_s3] = @p87, [Ereg_s4] = @p88, [Sreg_s1] = @p8"& _ 
                "9, [Sreg_s2] = @p90, [Sreg_s3] = @p91, [Sreg_s4] = @p92 WHERE (([ID] = @p93))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Name", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p2", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "P_inc_s1", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p3", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "P_dec_s1", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p4", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "B_inc_s1", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p5", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "B_dec_s1", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p6", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "E_s1", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p7", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Symmetry_s1", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p8", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "P_inc_s2", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p9", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "P_dec_s2", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p10", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "B_inc_s2", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p11", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "B_dec_s2", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p12", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "E_s2", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p13", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Symmetry_s2", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p14", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "P_inc_s3", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p15", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "P_dec_s3", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p16", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "B_inc_s3", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p17", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "B_dec_s3", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p18", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "E_s3", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p19", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Symmetry_s3", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p20", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "P_inc_s4", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p21", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "P_dec_s4", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p22", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "B_inc_s4", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p23", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "B_dec_s4", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p24", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "E_s4", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p25", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Symmetry_s4", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p26", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Check_s1", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p27", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Check_s2", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p28", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Check_s3", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p29", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Check_s4", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p30", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "ProkachkaTime", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p31", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "ProkackaAmpl", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p32", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "ProkachkaSpeed", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p33", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "ProkachkaMotorSpeed", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p34", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "ProkachkaMotorSpeedMax", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p35", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "S1_Time", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p36", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "S1_Ampl", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p37", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "S1_MotorSpeed", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p38", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "S1_MotorSpeedMax", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p39", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "S2_Time", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p40", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "S2_Ampl", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p41", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "S2_MotorSpeed", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p42", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "S2_MotorSpeedMax", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p43", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "S3_Time", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p44", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "S3_Ampl", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p45", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "S3_MotorSpeed", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p46", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "S3_MotorSpeedMax", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p47", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "S4_Time", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p48", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "S4_Ampl", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p49", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "S4_MotorSpeed", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p50", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "S4_MotorSpeedMax", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p51", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "d_nom", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p52", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "d_hot", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p53", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "d_cold", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p54", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Type", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p55", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "S1_Angle", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p56", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "S2_Angle", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p57", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "S3_Angle", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p58", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "S4_Angle", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p59", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "ProkachkaAngle", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p60", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Check_Prokachka", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p61", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "S1_Speed1", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p62", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "S2_Speed2", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p63", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "S3_Speed3", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p64", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "S4_Speed4", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p65", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "DP_inc_s1", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p66", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "DP_inc_s2", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p67", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "DP_inc_s3", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p68", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "DP_inc_s4", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p69", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "DP_dec_s1", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p70", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "DP_dec_s2", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p71", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "DP_dec_s3", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p72", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "DP_dec_s4", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p73", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "DE_s1", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p74", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "DE_s2", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p75", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "DE_s3", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p76", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "DE_s4", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p77", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Reg_s1", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p78", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Reg_s2", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p79", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Reg_s3", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p80", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Reg_s4", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p81", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Breg_s1", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p82", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Breg_s2", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p83", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Breg_s3", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p84", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Breg_s4", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p85", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Ereg_s1", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p86", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Ereg_s2", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p87", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Ereg_s3", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p88", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Ereg_s4", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p89", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Sreg_s1", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p90", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Sreg_s2", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p91", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Sreg_s3", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p92", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "Sreg_s4", Global.System.Data.DataRowVersion.Current, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlServerCe.SqlCeParameter("@p93", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, true, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlServerCe.SqlCeConnection()
            Me._connection.ConnectionString = Global.Gidrogasitel.My.MySettings.Default.GidrogasitelConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlServerCe.SqlCeCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlServerCe.SqlCeCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ID, Name, P_inc_s1, P_dec_s1, B_inc_s1, B_dec_s1, E_s1, Symmetry_s1"& _ 
                ", P_inc_s2, P_dec_s2, B_inc_s2, B_dec_s2, E_s2, Symmetry_s2, P_inc_s3, P_dec_s3,"& _ 
                " "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         B_inc_s3, B_dec_s3, E_s3, Symmetry_s3, P_inc_s4, P_d"& _ 
                "ec_s4, B_inc_s4, B_dec_s4, E_s4, Symmetry_s4, Check_s1, Check_s2, Check_s3, Chec"& _ 
                "k_s4, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         ProkachkaTime, ProkackaAmpl, ProkachkaSpeed, Pr"& _ 
                "okachkaMotorSpeed, ProkachkaMotorSpeedMax, S1_Time, S1_Ampl, S1_MotorSpeed, S1_M"& _ 
                "otorSpeedMax, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         S2_Time, S2_Ampl, S2_MotorSpeed, S2_Mot"& _ 
                "orSpeedMax, S3_Time, S3_Ampl, S3_MotorSpeed, S3_MotorSpeedMax, S4_Time, S4_Ampl,"& _ 
                " S4_MotorSpeed, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         S4_MotorSpeedMax, d_nom, d_hot, d_col"& _ 
                "d, Type, S1_Angle, S2_Angle, S3_Angle, S4_Angle, ProkachkaAngle, Check_Prokachka"& _ 
                ", S1_Speed1, S2_Speed2, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         S3_Speed3, S4_Speed4, DP_inc_"& _ 
                "s1, DP_inc_s2, DP_inc_s3, DP_inc_s4, DP_dec_s1, DP_dec_s2, DP_dec_s3, DP_dec_s4,"& _ 
                " DE_s1, DE_s2, DE_s3, DE_s4, Reg_s1, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Reg_s2, Reg_s3, "& _ 
                "Reg_s4, Breg_s1, Breg_s2, Breg_s3, Breg_s4, Ereg_s1, Ereg_s2, Ereg_s3, Ereg_s4, "& _ 
                "Sreg_s1, Sreg_s2, Sreg_s3, Sreg_s4"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Apparats"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY Name"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As GidrogasitelDataSet.ApparatsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As GidrogasitelDataSet.ApparatsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As GidrogasitelDataSet.ApparatsDataTable = New GidrogasitelDataSet.ApparatsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As GidrogasitelDataSet.ApparatsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As GidrogasitelDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Apparats")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal p1 As Long) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(p1,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal p1 As String,  _
                    ByVal p2 As Global.System.Nullable(Of Single),  _
                    ByVal p3 As Global.System.Nullable(Of Single),  _
                    ByVal p4 As Global.System.Nullable(Of Single),  _
                    ByVal p5 As Global.System.Nullable(Of Single),  _
                    ByVal p6 As Global.System.Nullable(Of Single),  _
                    ByVal p7 As Global.System.Nullable(Of Single),  _
                    ByVal p8 As Global.System.Nullable(Of Single),  _
                    ByVal p9 As Global.System.Nullable(Of Single),  _
                    ByVal p10 As Global.System.Nullable(Of Single),  _
                    ByVal p11 As Global.System.Nullable(Of Single),  _
                    ByVal p12 As Global.System.Nullable(Of Single),  _
                    ByVal p13 As Global.System.Nullable(Of Single),  _
                    ByVal p14 As Global.System.Nullable(Of Single),  _
                    ByVal p15 As Global.System.Nullable(Of Single),  _
                    ByVal p16 As Global.System.Nullable(Of Single),  _
                    ByVal p17 As Global.System.Nullable(Of Single),  _
                    ByVal p18 As Global.System.Nullable(Of Single),  _
                    ByVal p19 As Global.System.Nullable(Of Single),  _
                    ByVal p20 As Global.System.Nullable(Of Single),  _
                    ByVal p21 As Global.System.Nullable(Of Single),  _
                    ByVal p22 As Global.System.Nullable(Of Single),  _
                    ByVal p23 As Global.System.Nullable(Of Single),  _
                    ByVal p24 As Global.System.Nullable(Of Single),  _
                    ByVal p25 As Global.System.Nullable(Of Single),  _
                    ByVal p26 As Global.System.Nullable(Of Integer),  _
                    ByVal p27 As Global.System.Nullable(Of Integer),  _
                    ByVal p28 As Global.System.Nullable(Of Integer),  _
                    ByVal p29 As Global.System.Nullable(Of Integer),  _
                    ByVal p30 As Global.System.Nullable(Of Integer),  _
                    ByVal p31 As Global.System.Nullable(Of Integer),  _
                    ByVal p32 As Global.System.Nullable(Of Single),  _
                    ByVal p33 As Global.System.Nullable(Of Single),  _
                    ByVal p34 As Global.System.Nullable(Of Single),  _
                    ByVal p35 As Global.System.Nullable(Of Single),  _
                    ByVal p36 As Global.System.Nullable(Of Single),  _
                    ByVal p37 As Global.System.Nullable(Of Single),  _
                    ByVal p38 As Global.System.Nullable(Of Single),  _
                    ByVal p39 As Global.System.Nullable(Of Single),  _
                    ByVal p40 As Global.System.Nullable(Of Single),  _
                    ByVal p41 As Global.System.Nullable(Of Single),  _
                    ByVal p42 As Global.System.Nullable(Of Single),  _
                    ByVal p43 As Global.System.Nullable(Of Single),  _
                    ByVal p44 As Global.System.Nullable(Of Single),  _
                    ByVal p45 As Global.System.Nullable(Of Single),  _
                    ByVal p46 As Global.System.Nullable(Of Single),  _
                    ByVal p47 As Global.System.Nullable(Of Single),  _
                    ByVal p48 As Global.System.Nullable(Of Single),  _
                    ByVal p49 As Global.System.Nullable(Of Single),  _
                    ByVal p50 As Global.System.Nullable(Of Single),  _
                    ByVal p51 As Global.System.Nullable(Of Single),  _
                    ByVal p52 As Global.System.Nullable(Of Single),  _
                    ByVal p53 As Global.System.Nullable(Of Single),  _
                    ByVal p54 As Global.System.Nullable(Of Long),  _
                    ByVal p55 As Global.System.Nullable(Of Integer),  _
                    ByVal p56 As Global.System.Nullable(Of Integer),  _
                    ByVal p57 As Global.System.Nullable(Of Integer),  _
                    ByVal p58 As Global.System.Nullable(Of Integer),  _
                    ByVal p59 As Global.System.Nullable(Of Integer),  _
                    ByVal p60 As Global.System.Nullable(Of Integer),  _
                    ByVal p61 As Global.System.Nullable(Of Single),  _
                    ByVal p62 As Global.System.Nullable(Of Single),  _
                    ByVal p63 As Global.System.Nullable(Of Single),  _
                    ByVal p64 As Global.System.Nullable(Of Single),  _
                    ByVal p65 As Global.System.Nullable(Of Single),  _
                    ByVal p66 As Global.System.Nullable(Of Single),  _
                    ByVal p67 As Global.System.Nullable(Of Single),  _
                    ByVal p68 As Global.System.Nullable(Of Single),  _
                    ByVal p69 As Global.System.Nullable(Of Single),  _
                    ByVal p70 As Global.System.Nullable(Of Single),  _
                    ByVal p71 As Global.System.Nullable(Of Single),  _
                    ByVal p72 As Global.System.Nullable(Of Single),  _
                    ByVal p73 As Global.System.Nullable(Of Single),  _
                    ByVal p74 As Global.System.Nullable(Of Single),  _
                    ByVal p75 As Global.System.Nullable(Of Single),  _
                    ByVal p76 As Global.System.Nullable(Of Single),  _
                    ByVal p77 As Global.System.Nullable(Of Integer),  _
                    ByVal p78 As Global.System.Nullable(Of Integer),  _
                    ByVal p79 As Global.System.Nullable(Of Integer),  _
                    ByVal p80 As Global.System.Nullable(Of Integer),  _
                    ByVal p81 As Global.System.Nullable(Of Integer),  _
                    ByVal p82 As Global.System.Nullable(Of Integer),  _
                    ByVal p83 As Global.System.Nullable(Of Integer),  _
                    ByVal p84 As Global.System.Nullable(Of Integer),  _
                    ByVal p85 As Global.System.Nullable(Of Integer),  _
                    ByVal p86 As Global.System.Nullable(Of Integer),  _
                    ByVal p87 As Global.System.Nullable(Of Integer),  _
                    ByVal p88 As Global.System.Nullable(Of Integer),  _
                    ByVal p89 As Global.System.Nullable(Of Integer),  _
                    ByVal p90 As Global.System.Nullable(Of Integer),  _
                    ByVal p91 As Global.System.Nullable(Of Integer),  _
                    ByVal p92 As Global.System.Nullable(Of Integer)) As Integer
            If (p1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(p2.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (p3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(p3.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (p4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(p4.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (p5.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(p5.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (p6.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(p6.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (p7.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(p7.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (p8.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(p8.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (p9.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(p9.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (p10.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(p10.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (p11.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(p11.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (p12.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(p12.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (p13.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(p13.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (p14.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(p14.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (p15.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(p15.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (p16.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(p16.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (p17.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(p17.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (p18.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(p18.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (p19.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(p19.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (p20.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(p20.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (p21.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(p21.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (p22.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(p22.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (p23.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(p23.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (p24.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(p24.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (p25.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(p25.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (p26.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(p26.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (p27.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(p27.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (p28.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(p28.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (p29.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(p29.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (p30.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(p30.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (p31.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(p31.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (p32.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(p32.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (p33.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(p33.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (p34.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(p34.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (p35.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(p35.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (p36.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(p36.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (p37.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(p37.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (p38.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(p38.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (p39.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(38).Value = CType(p39.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (p40.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(39).Value = CType(p40.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (p41.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(40).Value = CType(p41.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (p42.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(41).Value = CType(p42.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (p43.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(42).Value = CType(p43.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (p44.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(43).Value = CType(p44.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (p45.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(44).Value = CType(p45.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (p46.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(45).Value = CType(p46.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(45).Value = Global.System.DBNull.Value
            End If
            If (p47.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(46).Value = CType(p47.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (p48.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(47).Value = CType(p48.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (p49.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(48).Value = CType(p49.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (p50.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(49).Value = CType(p50.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            If (p51.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(50).Value = CType(p51.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(50).Value = Global.System.DBNull.Value
            End If
            If (p52.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(51).Value = CType(p52.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(51).Value = Global.System.DBNull.Value
            End If
            If (p53.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(52).Value = CType(p53.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(52).Value = Global.System.DBNull.Value
            End If
            If (p54.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(53).Value = CType(p54.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(53).Value = Global.System.DBNull.Value
            End If
            If (p55.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(54).Value = CType(p55.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(54).Value = Global.System.DBNull.Value
            End If
            If (p56.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(55).Value = CType(p56.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(55).Value = Global.System.DBNull.Value
            End If
            If (p57.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(56).Value = CType(p57.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(56).Value = Global.System.DBNull.Value
            End If
            If (p58.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(57).Value = CType(p58.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(57).Value = Global.System.DBNull.Value
            End If
            If (p59.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(58).Value = CType(p59.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(58).Value = Global.System.DBNull.Value
            End If
            If (p60.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(59).Value = CType(p60.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(59).Value = Global.System.DBNull.Value
            End If
            If (p61.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(60).Value = CType(p61.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(60).Value = Global.System.DBNull.Value
            End If
            If (p62.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(61).Value = CType(p62.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(61).Value = Global.System.DBNull.Value
            End If
            If (p63.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(62).Value = CType(p63.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(62).Value = Global.System.DBNull.Value
            End If
            If (p64.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(63).Value = CType(p64.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(63).Value = Global.System.DBNull.Value
            End If
            If (p65.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(64).Value = CType(p65.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(64).Value = Global.System.DBNull.Value
            End If
            If (p66.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(65).Value = CType(p66.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(65).Value = Global.System.DBNull.Value
            End If
            If (p67.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(66).Value = CType(p67.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(66).Value = Global.System.DBNull.Value
            End If
            If (p68.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(67).Value = CType(p68.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(67).Value = Global.System.DBNull.Value
            End If
            If (p69.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(68).Value = CType(p69.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(68).Value = Global.System.DBNull.Value
            End If
            If (p70.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(69).Value = CType(p70.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(69).Value = Global.System.DBNull.Value
            End If
            If (p71.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(70).Value = CType(p71.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(70).Value = Global.System.DBNull.Value
            End If
            If (p72.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(71).Value = CType(p72.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(71).Value = Global.System.DBNull.Value
            End If
            If (p73.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(72).Value = CType(p73.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(72).Value = Global.System.DBNull.Value
            End If
            If (p74.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(73).Value = CType(p74.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(73).Value = Global.System.DBNull.Value
            End If
            If (p75.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(74).Value = CType(p75.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(74).Value = Global.System.DBNull.Value
            End If
            If (p76.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(75).Value = CType(p76.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(75).Value = Global.System.DBNull.Value
            End If
            If (p77.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(76).Value = CType(p77.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(76).Value = Global.System.DBNull.Value
            End If
            If (p78.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(77).Value = CType(p78.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(77).Value = Global.System.DBNull.Value
            End If
            If (p79.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(78).Value = CType(p79.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(78).Value = Global.System.DBNull.Value
            End If
            If (p80.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(79).Value = CType(p80.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(79).Value = Global.System.DBNull.Value
            End If
            If (p81.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(80).Value = CType(p81.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(80).Value = Global.System.DBNull.Value
            End If
            If (p82.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(81).Value = CType(p82.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(81).Value = Global.System.DBNull.Value
            End If
            If (p83.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(82).Value = CType(p83.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(82).Value = Global.System.DBNull.Value
            End If
            If (p84.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(83).Value = CType(p84.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(83).Value = Global.System.DBNull.Value
            End If
            If (p85.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(84).Value = CType(p85.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(84).Value = Global.System.DBNull.Value
            End If
            If (p86.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(85).Value = CType(p86.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(85).Value = Global.System.DBNull.Value
            End If
            If (p87.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(86).Value = CType(p87.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(86).Value = Global.System.DBNull.Value
            End If
            If (p88.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(87).Value = CType(p88.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(87).Value = Global.System.DBNull.Value
            End If
            If (p89.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(88).Value = CType(p89.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(88).Value = Global.System.DBNull.Value
            End If
            If (p90.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(89).Value = CType(p90.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(89).Value = Global.System.DBNull.Value
            End If
            If (p91.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(90).Value = CType(p91.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(90).Value = Global.System.DBNull.Value
            End If
            If (p92.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(91).Value = CType(p92.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(91).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal p1 As String,  _
                    ByVal p2 As Global.System.Nullable(Of Single),  _
                    ByVal p3 As Global.System.Nullable(Of Single),  _
                    ByVal p4 As Global.System.Nullable(Of Single),  _
                    ByVal p5 As Global.System.Nullable(Of Single),  _
                    ByVal p6 As Global.System.Nullable(Of Single),  _
                    ByVal p7 As Global.System.Nullable(Of Single),  _
                    ByVal p8 As Global.System.Nullable(Of Single),  _
                    ByVal p9 As Global.System.Nullable(Of Single),  _
                    ByVal p10 As Global.System.Nullable(Of Single),  _
                    ByVal p11 As Global.System.Nullable(Of Single),  _
                    ByVal p12 As Global.System.Nullable(Of Single),  _
                    ByVal p13 As Global.System.Nullable(Of Single),  _
                    ByVal p14 As Global.System.Nullable(Of Single),  _
                    ByVal p15 As Global.System.Nullable(Of Single),  _
                    ByVal p16 As Global.System.Nullable(Of Single),  _
                    ByVal p17 As Global.System.Nullable(Of Single),  _
                    ByVal p18 As Global.System.Nullable(Of Single),  _
                    ByVal p19 As Global.System.Nullable(Of Single),  _
                    ByVal p20 As Global.System.Nullable(Of Single),  _
                    ByVal p21 As Global.System.Nullable(Of Single),  _
                    ByVal p22 As Global.System.Nullable(Of Single),  _
                    ByVal p23 As Global.System.Nullable(Of Single),  _
                    ByVal p24 As Global.System.Nullable(Of Single),  _
                    ByVal p25 As Global.System.Nullable(Of Single),  _
                    ByVal p26 As Global.System.Nullable(Of Integer),  _
                    ByVal p27 As Global.System.Nullable(Of Integer),  _
                    ByVal p28 As Global.System.Nullable(Of Integer),  _
                    ByVal p29 As Global.System.Nullable(Of Integer),  _
                    ByVal p30 As Global.System.Nullable(Of Integer),  _
                    ByVal p31 As Global.System.Nullable(Of Integer),  _
                    ByVal p32 As Global.System.Nullable(Of Single),  _
                    ByVal p33 As Global.System.Nullable(Of Single),  _
                    ByVal p34 As Global.System.Nullable(Of Single),  _
                    ByVal p35 As Global.System.Nullable(Of Single),  _
                    ByVal p36 As Global.System.Nullable(Of Single),  _
                    ByVal p37 As Global.System.Nullable(Of Single),  _
                    ByVal p38 As Global.System.Nullable(Of Single),  _
                    ByVal p39 As Global.System.Nullable(Of Single),  _
                    ByVal p40 As Global.System.Nullable(Of Single),  _
                    ByVal p41 As Global.System.Nullable(Of Single),  _
                    ByVal p42 As Global.System.Nullable(Of Single),  _
                    ByVal p43 As Global.System.Nullable(Of Single),  _
                    ByVal p44 As Global.System.Nullable(Of Single),  _
                    ByVal p45 As Global.System.Nullable(Of Single),  _
                    ByVal p46 As Global.System.Nullable(Of Single),  _
                    ByVal p47 As Global.System.Nullable(Of Single),  _
                    ByVal p48 As Global.System.Nullable(Of Single),  _
                    ByVal p49 As Global.System.Nullable(Of Single),  _
                    ByVal p50 As Global.System.Nullable(Of Single),  _
                    ByVal p51 As Global.System.Nullable(Of Single),  _
                    ByVal p52 As Global.System.Nullable(Of Single),  _
                    ByVal p53 As Global.System.Nullable(Of Single),  _
                    ByVal p54 As Global.System.Nullable(Of Long),  _
                    ByVal p55 As Global.System.Nullable(Of Integer),  _
                    ByVal p56 As Global.System.Nullable(Of Integer),  _
                    ByVal p57 As Global.System.Nullable(Of Integer),  _
                    ByVal p58 As Global.System.Nullable(Of Integer),  _
                    ByVal p59 As Global.System.Nullable(Of Integer),  _
                    ByVal p60 As Global.System.Nullable(Of Integer),  _
                    ByVal p61 As Global.System.Nullable(Of Single),  _
                    ByVal p62 As Global.System.Nullable(Of Single),  _
                    ByVal p63 As Global.System.Nullable(Of Single),  _
                    ByVal p64 As Global.System.Nullable(Of Single),  _
                    ByVal p65 As Global.System.Nullable(Of Single),  _
                    ByVal p66 As Global.System.Nullable(Of Single),  _
                    ByVal p67 As Global.System.Nullable(Of Single),  _
                    ByVal p68 As Global.System.Nullable(Of Single),  _
                    ByVal p69 As Global.System.Nullable(Of Single),  _
                    ByVal p70 As Global.System.Nullable(Of Single),  _
                    ByVal p71 As Global.System.Nullable(Of Single),  _
                    ByVal p72 As Global.System.Nullable(Of Single),  _
                    ByVal p73 As Global.System.Nullable(Of Single),  _
                    ByVal p74 As Global.System.Nullable(Of Single),  _
                    ByVal p75 As Global.System.Nullable(Of Single),  _
                    ByVal p76 As Global.System.Nullable(Of Single),  _
                    ByVal p77 As Global.System.Nullable(Of Integer),  _
                    ByVal p78 As Global.System.Nullable(Of Integer),  _
                    ByVal p79 As Global.System.Nullable(Of Integer),  _
                    ByVal p80 As Global.System.Nullable(Of Integer),  _
                    ByVal p81 As Global.System.Nullable(Of Integer),  _
                    ByVal p82 As Global.System.Nullable(Of Integer),  _
                    ByVal p83 As Global.System.Nullable(Of Integer),  _
                    ByVal p84 As Global.System.Nullable(Of Integer),  _
                    ByVal p85 As Global.System.Nullable(Of Integer),  _
                    ByVal p86 As Global.System.Nullable(Of Integer),  _
                    ByVal p87 As Global.System.Nullable(Of Integer),  _
                    ByVal p88 As Global.System.Nullable(Of Integer),  _
                    ByVal p89 As Global.System.Nullable(Of Integer),  _
                    ByVal p90 As Global.System.Nullable(Of Integer),  _
                    ByVal p91 As Global.System.Nullable(Of Integer),  _
                    ByVal p92 As Global.System.Nullable(Of Integer),  _
                    ByVal p93 As Long) As Integer
            If (p1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p2.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (p3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(p3.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (p4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(p4.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (p5.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(p5.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (p6.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(p6.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (p7.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(p7.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (p8.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(p8.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (p9.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(p9.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (p10.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(p10.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (p11.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(p11.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (p12.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(p12.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (p13.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(p13.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (p14.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(p14.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (p15.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(p15.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (p16.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(p16.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (p17.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(p17.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (p18.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(p18.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (p19.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(p19.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (p20.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(p20.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (p21.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(p21.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (p22.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(p22.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (p23.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(p23.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (p24.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(p24.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (p25.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(p25.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (p26.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(p26.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (p27.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(p27.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (p28.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(p28.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (p29.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(p29.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (p30.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(p30.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (p31.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(p31.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (p32.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(p32.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (p33.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(p33.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (p34.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(p34.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (p35.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(p35.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (p36.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(p36.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (p37.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(p37.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (p38.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(p38.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (p39.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(p39.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (p40.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(p40.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (p41.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(p41.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (p42.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(p42.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (p43.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(p43.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (p44.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(p44.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (p45.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(p45.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (p46.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(p46.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            End If
            If (p47.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(p47.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (p48.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(p48.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (p49.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(p49.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (p50.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(p50.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            If (p51.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(p51.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = Global.System.DBNull.Value
            End If
            If (p52.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(p52.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = Global.System.DBNull.Value
            End If
            If (p53.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(p53.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = Global.System.DBNull.Value
            End If
            If (p54.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(p54.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = Global.System.DBNull.Value
            End If
            If (p55.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(p55.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = Global.System.DBNull.Value
            End If
            If (p56.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(p56.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(55).Value = Global.System.DBNull.Value
            End If
            If (p57.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(p57.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = Global.System.DBNull.Value
            End If
            If (p58.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(p58.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(57).Value = Global.System.DBNull.Value
            End If
            If (p59.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(p59.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = Global.System.DBNull.Value
            End If
            If (p60.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(p60.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(59).Value = Global.System.DBNull.Value
            End If
            If (p61.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(p61.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = Global.System.DBNull.Value
            End If
            If (p62.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(p62.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(61).Value = Global.System.DBNull.Value
            End If
            If (p63.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(p63.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(62).Value = Global.System.DBNull.Value
            End If
            If (p64.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(p64.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(63).Value = Global.System.DBNull.Value
            End If
            If (p65.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(p65.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(64).Value = Global.System.DBNull.Value
            End If
            If (p66.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(p66.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(65).Value = Global.System.DBNull.Value
            End If
            If (p67.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(p67.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(66).Value = Global.System.DBNull.Value
            End If
            If (p68.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(p68.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(67).Value = Global.System.DBNull.Value
            End If
            If (p69.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(p69.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(68).Value = Global.System.DBNull.Value
            End If
            If (p70.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(p70.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(69).Value = Global.System.DBNull.Value
            End If
            If (p71.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(p71.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(70).Value = Global.System.DBNull.Value
            End If
            If (p72.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(p72.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(71).Value = Global.System.DBNull.Value
            End If
            If (p73.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(p73.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(72).Value = Global.System.DBNull.Value
            End If
            If (p74.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(p74.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(73).Value = Global.System.DBNull.Value
            End If
            If (p75.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(p75.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(74).Value = Global.System.DBNull.Value
            End If
            If (p76.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(p76.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(75).Value = Global.System.DBNull.Value
            End If
            If (p77.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(p77.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(76).Value = Global.System.DBNull.Value
            End If
            If (p78.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(p78.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(77).Value = Global.System.DBNull.Value
            End If
            If (p79.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(p79.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(78).Value = Global.System.DBNull.Value
            End If
            If (p80.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(79).Value = CType(p80.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(79).Value = Global.System.DBNull.Value
            End If
            If (p81.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(p81.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(80).Value = Global.System.DBNull.Value
            End If
            If (p82.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(81).Value = CType(p82.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(81).Value = Global.System.DBNull.Value
            End If
            If (p83.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(82).Value = CType(p83.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(82).Value = Global.System.DBNull.Value
            End If
            If (p84.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(83).Value = CType(p84.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(83).Value = Global.System.DBNull.Value
            End If
            If (p85.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(84).Value = CType(p85.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(84).Value = Global.System.DBNull.Value
            End If
            If (p86.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(85).Value = CType(p86.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(85).Value = Global.System.DBNull.Value
            End If
            If (p87.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(86).Value = CType(p87.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(86).Value = Global.System.DBNull.Value
            End If
            If (p88.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(87).Value = CType(p88.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(87).Value = Global.System.DBNull.Value
            End If
            If (p89.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(88).Value = CType(p89.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(88).Value = Global.System.DBNull.Value
            End If
            If (p90.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(89).Value = CType(p90.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(89).Value = Global.System.DBNull.Value
            End If
            If (p91.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(90).Value = CType(p91.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(90).Value = Global.System.DBNull.Value
            End If
            If (p92.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(91).Value = CType(p92.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(91).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(92).Value = CType(p93,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _mainTableAdapter As mainTableAdapter
        
        Private _appointmentTableAdapter As AppointmentTableAdapter
        
        Private _operatorsTableAdapter As OperatorsTableAdapter
        
        Private _remontTableAdapter As RemontTableAdapter
        
        Private _apparatTypeTableAdapter As ApparatTypeTableAdapter
        
        Private _rezultTableAdapter As RezultTableAdapter
        
        Private _apparatsTableAdapter As ApparatsTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property mainTableAdapter() As mainTableAdapter
            Get
                Return Me._mainTableAdapter
            End Get
            Set
                Me._mainTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property AppointmentTableAdapter() As AppointmentTableAdapter
            Get
                Return Me._appointmentTableAdapter
            End Get
            Set
                Me._appointmentTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property OperatorsTableAdapter() As OperatorsTableAdapter
            Get
                Return Me._operatorsTableAdapter
            End Get
            Set
                Me._operatorsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property RemontTableAdapter() As RemontTableAdapter
            Get
                Return Me._remontTableAdapter
            End Get
            Set
                Me._remontTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ApparatTypeTableAdapter() As ApparatTypeTableAdapter
            Get
                Return Me._apparatTypeTableAdapter
            End Get
            Set
                Me._apparatTypeTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property RezultTableAdapter() As RezultTableAdapter
            Get
                Return Me._rezultTableAdapter
            End Get
            Set
                Me._rezultTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ApparatsTableAdapter() As ApparatsTableAdapter
            Get
                Return Me._apparatsTableAdapter
            End Get
            Set
                Me._apparatsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._mainTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._mainTableAdapter.Connection) Is Nothing)) Then
                    Return Me._mainTableAdapter.Connection
                End If
                If ((Not (Me._appointmentTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._appointmentTableAdapter.Connection) Is Nothing)) Then
                    Return Me._appointmentTableAdapter.Connection
                End If
                If ((Not (Me._operatorsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._operatorsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._operatorsTableAdapter.Connection
                End If
                If ((Not (Me._remontTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._remontTableAdapter.Connection) Is Nothing)) Then
                    Return Me._remontTableAdapter.Connection
                End If
                If ((Not (Me._apparatTypeTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._apparatTypeTableAdapter.Connection) Is Nothing)) Then
                    Return Me._apparatTypeTableAdapter.Connection
                End If
                If ((Not (Me._rezultTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._rezultTableAdapter.Connection) Is Nothing)) Then
                    Return Me._rezultTableAdapter.Connection
                End If
                If ((Not (Me._apparatsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._apparatsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._apparatsTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._mainTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._appointmentTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._operatorsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._remontTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._apparatTypeTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._rezultTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._apparatsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As GidrogasitelDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._apparatTypeTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ApparatType.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._apparatTypeTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._appointmentTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Appointment.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._appointmentTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._rezultTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Rezult.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._rezultTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._apparatsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Apparats.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._apparatsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._remontTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Remont.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._remontTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._operatorsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Operators.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._operatorsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._mainTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.main.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._mainTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As GidrogasitelDataSet, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._apparatTypeTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ApparatType.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._apparatTypeTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._appointmentTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Appointment.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._appointmentTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._rezultTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Rezult.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._rezultTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._apparatsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Apparats.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._apparatsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._remontTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Remont.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._remontTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._operatorsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Operators.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._operatorsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._mainTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.main.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._mainTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As GidrogasitelDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._mainTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.main.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._mainTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._operatorsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Operators.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._operatorsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._remontTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Remont.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._remontTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._apparatsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Apparats.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._apparatsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._rezultTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Rezult.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._rezultTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._appointmentTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Appointment.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._appointmentTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._apparatTypeTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ApparatType.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._apparatTypeTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As GidrogasitelDataSet) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._mainTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._mainTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage"& _ 
                        "r, должны использовать одинаковую строку подключения.")
            End If
            If ((Not (Me._appointmentTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._appointmentTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage"& _ 
                        "r, должны использовать одинаковую строку подключения.")
            End If
            If ((Not (Me._operatorsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._operatorsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage"& _ 
                        "r, должны использовать одинаковую строку подключения.")
            End If
            If ((Not (Me._remontTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._remontTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage"& _ 
                        "r, должны использовать одинаковую строку подключения.")
            End If
            If ((Not (Me._apparatTypeTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._apparatTypeTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage"& _ 
                        "r, должны использовать одинаковую строку подключения.")
            End If
            If ((Not (Me._rezultTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._rezultTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage"& _ 
                        "r, должны использовать одинаковую строку подключения.")
            End If
            If ((Not (Me._apparatsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._apparatsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage"& _ 
                        "r, должны использовать одинаковую строку подключения.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager не содержит сведений о подключении. Укажите для каждого адапт"& _ 
                        "ера таблицы TableAdapterManager допустимый экземпляр адаптера таблицы.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("Не удается начать транзакцию. Текущее соединение данных не поддерживает транзакци"& _ 
                        "и или текущее состояние не позволяет начать транзакцию.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._mainTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._mainTableAdapter, Me._mainTableAdapter.Connection)
                    Me._mainTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlServerCe.SqlCeConnection)
                    Me._mainTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlServerCe.SqlCeTransaction)
                    If Me._mainTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._mainTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._mainTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._appointmentTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._appointmentTableAdapter, Me._appointmentTableAdapter.Connection)
                    Me._appointmentTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlServerCe.SqlCeConnection)
                    Me._appointmentTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlServerCe.SqlCeTransaction)
                    If Me._appointmentTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._appointmentTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._appointmentTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._operatorsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._operatorsTableAdapter, Me._operatorsTableAdapter.Connection)
                    Me._operatorsTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlServerCe.SqlCeConnection)
                    Me._operatorsTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlServerCe.SqlCeTransaction)
                    If Me._operatorsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._operatorsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._operatorsTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._remontTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._remontTableAdapter, Me._remontTableAdapter.Connection)
                    Me._remontTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlServerCe.SqlCeConnection)
                    Me._remontTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlServerCe.SqlCeTransaction)
                    If Me._remontTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._remontTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._remontTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._apparatTypeTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._apparatTypeTableAdapter, Me._apparatTypeTableAdapter.Connection)
                    Me._apparatTypeTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlServerCe.SqlCeConnection)
                    Me._apparatTypeTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlServerCe.SqlCeTransaction)
                    If Me._apparatTypeTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._apparatTypeTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._apparatTypeTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._rezultTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._rezultTableAdapter, Me._rezultTableAdapter.Connection)
                    Me._rezultTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlServerCe.SqlCeConnection)
                    Me._rezultTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlServerCe.SqlCeTransaction)
                    If Me._rezultTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._rezultTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._rezultTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._apparatsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._apparatsTableAdapter, Me._apparatsTableAdapter.Connection)
                    Me._apparatsTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlServerCe.SqlCeConnection)
                    Me._apparatsTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlServerCe.SqlCeTransaction)
                    If Me._apparatsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._apparatsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._apparatsTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._mainTableAdapter) Is Nothing) Then
                    Me._mainTableAdapter.Connection = CType(revertConnections(Me._mainTableAdapter),Global.System.Data.SqlServerCe.SqlCeConnection)
                    Me._mainTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._appointmentTableAdapter) Is Nothing) Then
                    Me._appointmentTableAdapter.Connection = CType(revertConnections(Me._appointmentTableAdapter),Global.System.Data.SqlServerCe.SqlCeConnection)
                    Me._appointmentTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._operatorsTableAdapter) Is Nothing) Then
                    Me._operatorsTableAdapter.Connection = CType(revertConnections(Me._operatorsTableAdapter),Global.System.Data.SqlServerCe.SqlCeConnection)
                    Me._operatorsTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._remontTableAdapter) Is Nothing) Then
                    Me._remontTableAdapter.Connection = CType(revertConnections(Me._remontTableAdapter),Global.System.Data.SqlServerCe.SqlCeConnection)
                    Me._remontTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._apparatTypeTableAdapter) Is Nothing) Then
                    Me._apparatTypeTableAdapter.Connection = CType(revertConnections(Me._apparatTypeTableAdapter),Global.System.Data.SqlServerCe.SqlCeConnection)
                    Me._apparatTypeTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._rezultTableAdapter) Is Nothing) Then
                    Me._rezultTableAdapter.Connection = CType(revertConnections(Me._rezultTableAdapter),Global.System.Data.SqlServerCe.SqlCeConnection)
                    Me._rezultTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._apparatsTableAdapter) Is Nothing) Then
                    Me._apparatsTableAdapter.Connection = CType(revertConnections(Me._apparatsTableAdapter),Global.System.Data.SqlServerCe.SqlCeConnection)
                    Me._apparatsTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
